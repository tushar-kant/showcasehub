  [
    {
      "category":"Java",
      "description":"Java is a versatile, object-oriented programming language designed for building platform-independent applications",
      "questions":[
        {
          "question": "What is Java?",
          "answer": "Java is a high-level, class-based, object-oriented programming language designed to have as few implementation dependencies as possible."
        },
        {
          "question": "What are the main features of Java?",
          "answer": "The main features of Java include platform independence, object-oriented, robust, secure, multithreaded, architecture-neutral, portable, high performance, and interpreted."
        },
        {
          "question": "What is the JVM?",
          "answer": "JVM (Java Virtual Machine) is an abstract machine that enables your computer to run a Java program. It converts bytecode into machine-specific code."

        },
        {
          "question": "What is the JDK?",
          "answer": "JDK (Java Development Kit) is a software development kit used to develop Java applications. It includes the JRE, an interpreter/loader, a compiler, an archiver, a documentation generator, and other tools needed for Java development."
        },
        {
          "question": "What is the JRE?",
          "answer": "JRE (Java Runtime Environment) is a part of the JDK that provides the libraries, Java Virtual Machine, and other components to run applications written in Java."
        },
        {
          "question": "What are Javaâ€™s access modifiers?",
          "answer": "Java has four access modifiers: private, default, protected, and public. They control the visibility of classes, methods, and variables.",
          "code":"public class MyClass { public int myVar; private void myMethod() { /* code here */ } }"
        },
        {
          "question": "What is an object in Java?",
          "answer": "An object is an instance of a class. It has state (attributes) and behavior (methods).",
          "code":"public class Car { private String color; public void drive() { System.out.println('Car is moving'); } } Car myCar = new Car();"
        },
        {
          "question": "What is a class in Java?",
          "answer": "A class is a blueprint for objects. It defines a type of object according to the attributes and methods that the object can have.",
          "code":"public class Car { private String color; public void drive() { System.out.println('Car is moving'); } }"
        },
        {
          "question": "What is inheritance in Java?",
          "answer": "Inheritance is a mechanism where a new class inherits the properties and behavior of an existing class. It promotes code reuse.",
          "code":"public class Animal { public void eat() { System.out.println('Animal is eating'); } } public class Dog extends Animal { public void bark() { System.out.println('Dog is barking'); } }"
        },
        {
          "question": "What is polymorphism in Java?",
          "answer": "Polymorphism allows methods to do different things based on the object it is acting upon. It is achieved through method overloading and method overriding.",
          "code":"public class Animal { public void makeSound() { System.out.println('Animal makes a sound'); } } public class Dog extends Animal { public void makeSound() { System.out.println('Dog barks'); } }"
        },
        {
          "question": "What is encapsulation in Java?",
          "answer": "Encapsulation is a principle of wrapping data (variables) and code (methods) together as a single unit. It restricts direct access to some of the object's components, which is a way of hiding the internal representation of the object.",
          "code":"public class MyClass { private int myVar; public int getMyVar() { return myVar; } public void setMyVar(int value) { myVar = value; } }"
        },
        {
          "question": "What is abstraction in Java?",
          "answer": "Abstraction is the concept of hiding the complex implementation details and showing only the essential features of the object. It is achieved using abstract classes and interfaces.",
          "code":"public abstract class Shape { public abstract void draw(); }"
        },
        {
          "question": "What is a constructor in Java?",
          "answer": "A constructor is a special method that is called when an object is instantiated. It initializes the object.",
          "code":"public class MyClass { private int myVar; public MyClass(int value) { myVar = value; } }"
        },
        {
          "question": "What is method overloading in Java?",
          "answer": "Method overloading is a feature that allows a class to have more than one method with the same name, as long as their parameter lists are different.",
          "code":"public class MyClass { public void myMethod(int x) { System.out.println(x); } public void myMethod(int x, int y) { System.out.println(x + y); } }"
        },
        {
          "question": "What is method overriding in Java?",
          "answer": "Method overriding occurs when a subclass provides a specific implementation of a method that is already defined in its superclass.",
          "code":"public class Animal { public void makeSound() { System.out.println('Animal makes a sound'); } } public class Dog extends Animal { public void makeSound() { System.out.println('Dog barks'); } }"
        },
        {
          "question": "What is the difference between '=='' and 'equals()' in Java?",
          "answer": "'==' is a reference comparison operator used to check if two references point to the same object. 'equals()' is a method used to compare the contents of two objects for equality.",
          "code":"String str1 = new String('Hello'); String str2 = new String('Hello'); System.out.println(str1 == str2); // false System.out.println(str1.equals(str2)); // true"
        },
        {
          "question": "What is an interface in Java?",
          "answer": "An interface in Java is a reference type, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types. It is a way to achieve abstraction."
        },
        {
          "question": "What is an abstract class in Java?",
          "answer": "An abstract class is a class that cannot be instantiated on its own and must be subclassed. It can contain both abstract methods (without implementation) and non-abstract methods (with implementation).",
          "code":"public abstract class Shape { public abstract void draw(); public void display() { System.out.println('Displaying shape'); } }"
        },
        {
          "question": "What is a static method in Java?",
          "answer": "A static method belongs to the class rather than instances of the class. It can be called without creating an instance of the class."
        },
        {
          "question": "What is a final keyword in Java?",
          "answer": "The final keyword in Java is used to restrict the user. It can be applied to variables, methods, and classes. A final variable cannot be changed, a final method cannot be overridden, and a final class cannot be subclassed.",
          "code":"public final class MyClass { public final int myVar = 10; public final void myMethod() { /* code here */ } }"
        },
        {
          "question": "What is the difference between an Array and an ArrayList in Java?",
          "answer": "An Array is a fixed-size data structure that can hold elements of the same type. An ArrayList is a resizable array, which is part of the Java Collections Framework and can dynamically grow and shrink.",
          "code":"int[] arr = new int[5]; ArrayList<Integer> list = new ArrayList<Integer>();"
        },
        {
          "question": "What is the 'this' keyword in Java?",
          "answer": "The 'this' keyword in Java is a reference to the current object, used to differentiate between instance variables and parameters or to invoke other constructors in the same class.",
          "code":"public class MyClass { private int myVar; public MyClass(int myVar) { this.myVar = myVar; } }"
        },
        {
          "question": "What is the 'super' keyword in Java?",
          "answer": "The 'super' keyword in Java is a reference to the parent class object, used to access the parent class's fields, methods, and constructors.",
          "code":"public class Child extends Parent { public Child() { super(); } }"
        },
        {
          "question": "What is exception handling in Java?",
          "answer": "Exception handling is a mechanism to handle runtime errors, ensuring the normal flow of the application. It is implemented using try, catch, throw, throws, and finally blocks."
        },
        {
          "question": "What are checked and unchecked exceptions in Java?",
          "answer": "Checked exceptions are exceptions that must be either caught or declared in the method signature. Unchecked exceptions are exceptions that are not checked at compile time, including RuntimeException and its subclasses.",
          "code":"public void myMethod() throws IOException { // code that may throw IOException }"
        },
        {
          "question": "What is the difference between 'throw' and 'throws' in Java?",
          "answer": "'throw' is used to explicitly throw an exception, while 'throws' is used in the method signature to declare that the method can throw specified exceptions.",
          "code":"public void myMethod() throws IOException { if (condition) { throw new IOException('Error'); } }"
        },
        {
          "question": "What is a package in Java?",
          "answer": "A package in Java is a namespace that organizes classes and interfaces, preventing naming conflicts and controlling access.",
          "code":"package com.example.myPackage; import com.example.myPackage.MyClass;"
        },
        {
          "question": "What is a 'String' in Java?",
          "answer": "A 'String' in Java is an immutable object that represents a sequence of characters. It is a class in the java.lang package."
        },
        {
          "question": "What are the different types of memory areas allocated by JVM?",
          "answer": "JVM allocates memory in different areas, including Method Area, Heap, Stack, PC Registers, and Native Method Stack."
        },
        {
          "question": "What is garbage collection in Java?",
          "answer": "Garbage collection in Java is the process of reclaiming the runtime unused memory automatically. The JVM manages the memory and eliminates the need for the programmer to manually deallocate memory.",
          "code":"System.gc();"
        },
        {
          "question": "What is multithreading in Java?",
          "answer": "Multithreading is a feature in Java that allows concurrent execution of two or more threads. It is used to maximize the utilization of CPU."
        },
        {
          "question": "What is the difference between a synchronized method and a synchronized block in Java?",
          "answer": "A synchronized method locks the entire method for a particular object, whereas a synchronized block locks only a specific block of code within the method. Using synchronized blocks is more granular and can lead to better performance."
        },
        {
          "question": "What is the purpose of the transient keyword in Java?",
          "answer": "The transient keyword in Java is used to indicate that a field should not be serialized. When an object is serialized, transient fields are ignored and not included in the serialized representation.",
          "code":"private transient int myVar;"
        },
        {
          "question": "What is the volatile keyword in Java?",
          "answer": "The volatile keyword in Java is used to indicate that a variable's value will be modified by different threads. It ensures visibility of changes to variables across threads, preventing threads from caching variables.",
          "code":"private volatile boolean running = true;"
        },
        {
          "question": "What is the difference between wait() and sleep() in Java?",
          "answer": "wait() is used to make the current thread release the lock and wait until another thread invokes notify() or notifyAll() on the same object. sleep() is used to pause the current thread for a specified period without releasing the lock.",
          "code":"synchronized (obj) { obj.wait(); } Thread.sleep(1000);"
        },
        {
          "question": "What is the Java Memory Model (JMM)?",
          "answer": "The Java Memory Model (JMM) defines how threads interact through memory and what behaviors are allowed in concurrent programming. It specifies rules for visibility, ordering, and atomicity of variables across threads."
        },
        {
          "question": "What is a ThreadLocal in Java?",
          "answer": "ThreadLocal is a class in Java that provides thread-local variables. Each thread accessing such a variable has its own, independently initialized copy of the variable, allowing for safe usage without synchronization.",
          "code":"ThreadLocal<Integer> threadLocal = ThreadLocal.withInitial(() -> 0); threadLocal.set(42); int value = threadLocal.get();"
        },
        {
          "question": "What is a daemon thread in Java?",
          "answer": "A daemon thread in Java is a background thread that does not prevent the JVM from exiting when the program finishes. Daemon threads are used for tasks like garbage collection and background maintenance.",
          "code":"Thread daemonThread = new Thread(() -> { while (true) { /* do some background work */ } }); daemonThread.setDaemon(true); daemonThread.start();"
        },
        {
          "question": "What are the differences between Serializable and Externalizable in Java?",
          "answer": "Serializable is a marker interface that uses default serialization mechanism, while Externalizable allows custom serialization logic by implementing readExternal() and writeExternal() methods.",
          "code":"public class MyClass implements Serializable { /* code here */ } public class MyClass implements Externalizable { /* code here */ }"
        },
        {
          "question": "What is the difference between Comparable and Comparator in Java?",
          "answer": "Comparable is used to define the natural ordering of objects by implementing the compareTo() method. Comparator is used to define custom ordering of objects by implementing the compare() method."
        },
        {
          "question": "What is the difference between HashMap and Hashtable in Java?",
          "answer": "HashMap is not synchronized and allows null keys and values, making it faster but not thread-safe. Hashtable is synchronized and does not allow null keys or values, making it slower but thread-safe.",
          "code":"HashMap<String, Integer> map = new HashMap<>(); Hashtable<String, Integer> table = new Hashtable<>();"
        },
        {
          "question": "What is the Java Stream API?",
          "answer": "The Java Stream API is a feature introduced in Java 8 that allows for functional-style operations on collections and sequences of data, such as map, filter, and reduce, promoting a more declarative programming approach."
        },
        {
          "question": "What is the Optional class in Java?",
          "answer": "The Optional class in Java is a container object used to represent the presence or absence of a value. It helps to avoid null checks and NullPointerExceptions by providing methods to check and manipulate the contained value.",
          "code":"Optional<String> optional = Optional.of('value'); if (optional.isPresent()) { String value = optional.get(); }"
        },
        {
          "question": "What is a lambda expression in Java?",
          "answer": "A lambda expression in Java is a concise way to represent an anonymous function, which can be used to pass behavior as an argument to methods, particularly useful for functional programming with the Stream API.",
          "code":"List<Integer> list = Arrays.asList(1, 2, 3, 4, 5); list.forEach(n -> System.out.println(n));"
        },
        {
          "question": "What is method reference in Java?",
          "answer": "Method reference is a shorthand notation of a lambda expression to call a method. It is represented by :: and can be used for static methods, instance methods, and constructors."
        },
        {
          "question": "What is the difference between map() and flatMap() in Java Stream API?",
          "answer": "map() transforms each element in the stream and returns a stream of those transformed elements. flatMap() transforms each element into a stream and flattens the resulting streams into a single stream.",
          "code":"List<List<Integer>> list = Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)); List<Integer> flatList = list.stream().flatMap(Collection::stream).collect(Collectors.toList());"
        },
        {
          "question": "What is the CompletableFuture class in Java?",
          "answer": "CompletableFuture is a class introduced in Java 8 that represents a future result of an asynchronous computation. It provides methods to manually complete the future and handle the result or exceptions.",
          "code":"CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> { /* computation */ }); Integer result = future.get();"
        },
        {
          "question": "What is the Fork/Join Framework in Java?",
          "answer": "The Fork/Join Framework in Java is used for parallel execution of tasks. It works by recursively breaking down a task into smaller sub-tasks, executing them in parallel, and combining their results.",
          "code":"ForkJoinPool pool = new ForkJoinPool(); pool.invoke(new MyRecursiveTask());"
        },
        {
          "question": "What is the difference between ExecutorService and ForkJoinPool in Java?",
          "answer": "ExecutorService is a higher-level replacement for a thread pool, suitable for managing a pool of threads for concurrent tasks. ForkJoinPool is specialized for working with the Fork/Join Framework for divide-and-conquer tasks."
        },
        {
          "question": "What is a CountDownLatch in Java?",
          "answer": "CountDownLatch is a synchronization aid that allows one or more threads to wait until a set of operations being performed by other threads completes. It has a counter that is decremented each time a thread finishes, releasing waiting threads when it reaches zero."
        },
        {
          "question": "What is a CyclicBarrier in Java?",
          "answer": "CyclicBarrier is a synchronization aid that allows a set of threads to wait for each other to reach a common barrier point. Once all threads reach the barrier, they can proceed."
        },
        {
          "question": "What is a Phaser in Java?",
          "answer": "Phaser is a more flexible synchronization barrier that allows multiple threads to wait for each other at a common barrier point, supporting multiple phases and dynamic registration of parties.",
          "code":"Phaser phaser = new Phaser(); phaser.register(); phaser.arriveAndAwaitAdvance();"
        },
        {
          "question": "What is the difference between a ReentrantLock and a synchronized block in Java?",
          "answer": "ReentrantLock is a more advanced locking mechanism than synchronized blocks, providing additional features like lock polling, timed locks, and interruptible locks, with explicit lock and unlock control."
        },
        {
          "question": "What is the difference between Callable and Runnable in Java?",
          "answer": "Callable is similar to Runnable but can return a result and throw a checked exception. Runnable does not return a result and cannot throw checked exceptions."
        },
        {
          "question": "What is the difference between Future and CompletableFuture in Java?",
          "answer": "Future represents the result of an asynchronous computation and provides methods to check if the computation is complete, cancel it, and retrieve the result. CompletableFuture extends Future with additional methods for manual completion and chaining asynchronous operations.",
          "code":"Future<Integer> future = executor.submit(() -> { /* computation */ }); Integer result = future.get(); CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> { /* computation */ }); Integer result = future.get();"
        },
        {
          "question": "What is the Double Brace Initialization in Java?",
          "answer": "Double Brace Initialization is a technique to initialize collections in Java using an anonymous inner class with an instance initializer. It simplifies syntax but creates an additional inner class, which can be less efficient and harder to read.",
          "code":"List<String> list = new ArrayList<String>() {{ add('A'); add('B'); }}; Set<Integer> set = new HashSet<Integer>() {{ add(1); add(2); }};"
        },
        {
          "question": "What is the diamond operator in Java?",
          "answer": "The diamond operator (<>) is used to simplify the syntax of generic instance creation by allowing the compiler to infer the type arguments, introduced in Java 7.",
          "code":"List<String> list = new ArrayList<>(); Map<Integer, String> map = new HashMap<>();"
        },
        {
          "question": "What is a WeakReference in Java?",
          "answer": "A WeakReference is a type of reference that does not prevent its referent from being reclaimed by the garbage collector. It is used to avoid memory leaks when caching objects."
        },
        {
          "question": "What is the difference between soft and weak references in Java?",
          "answer": "Soft references are cleared at the discretion of the garbage collector in response to memory demand, while weak references are cleared as soon as the referent is only weakly reachable."
        },
        {
          "question": "What is a PhantomReference in Java?",
          "answer": "A PhantomReference is used to schedule post-mortem cleanup actions after an object has been finalized. It always returns null for get() and must be used with a ReferenceQueue.",
          "code":"Object obj = new Object(); ReferenceQueue<Object> referenceQueue = new ReferenceQueue<>(); PhantomReference<Object> phantomRef = new PhantomReference<>(obj, referenceQueue);"
        },
        {
          "question": "What is a Spliterator in Java?",
          "answer": "A Spliterator is an interface in Java that can be used for traversing and partitioning elements of a source, similar to an Iterator, but with support for parallel processing introduced in Java 8."
        },
        {
          "question": "What is the Java Memory Model (JMM) and why is it important?",
          "answer": "The Java Memory Model (JMM) specifies how the Java Virtual Machine works with computer memory, particularly in the context of multithreading. It defines the rules for reading and writing to memory variables, ensuring that changes in one thread are visible to others. This is crucial for developing concurrent applications."
        },
        {
          "question": "What are the differences between the Java heap and stack memory?",
          "answer": "Heap memory is used for dynamic memory allocation where objects are allocated and managed by the garbage collector. Stack memory is used for static memory allocation where method-specific variables are stored. The stack is thread-safe as each thread has its own stack, while the heap is shared among all threads."
        },
        {
          "question": "How does the garbage collector work in Java?",
          "answer": "The garbage collector in Java automatically reclaims memory by removing objects that are no longer reachable in the program. It uses various algorithms such as Mark-and-Sweep, Generational Garbage Collection, and the G1 Garbage Collector to efficiently manage memory."
        },
        {
          "question": "What are the differences between strong, weak, soft, and phantom references in Java?",
          "answer": "Strong references prevent objects from being collected by the garbage collector. Weak references do not prevent garbage collection and are collected as soon as no strong references exist. Soft references are collected before an OutOfMemoryError occurs. Phantom references are collected after finalization and are used for cleanup tasks.",
          "code":"Object obj = new Object(); WeakReference<Object> weakRef = new WeakReference<>(obj); SoftReference<Object> softRef = new SoftReference<>(obj); PhantomReference<Object> phantomRef = new PhantomReference<>(obj, referenceQueue);"
        },
        {
          "question": "What is a memory leak in Java and how can it be detected?",
          "answer": "A memory leak in Java occurs when objects that are no longer needed are still referenced, preventing the garbage collector from reclaiming memory. It can be detected using profiling tools such as VisualVM, JProfiler, and memory analysis tools in IDEs."
        },
        {
          "question": "What is the significance of the 'finalize' method in Java?",
          "answer": "The 'finalize' method is invoked by the garbage collector before an object is reclaimed. It is used to perform cleanup tasks, but its use is discouraged due to unpredictability and performance issues. Java 9 deprecated the finalize method.",
          "code":"@Override protected void finalize() throws Throwable { /* cleanup code */ super.finalize(); }"
        },
        {
          "question": "What are the differences between the 'synchronized' keyword and the 'Lock' interface in Java?",
          "answer": "The 'synchronized' keyword provides a simple way to achieve synchronization but lacks flexibility. The 'Lock' interface, introduced in java.util.concurrent.locks, offers more advanced synchronization mechanisms like timed and interruptible lock acquisition, and better performance in highly contended scenarios."
        },
        {
          "question": "What are the different types of class loaders in Java?",
          "answer": "Java has several types of class loaders, including the Bootstrap ClassLoader, Extension ClassLoader, and Application ClassLoader. Custom class loaders can also be created to load classes from unconventional sources."
        },
        {
          "question": "What is the 'invokeLater' method in Swing and why is it used?",
          "answer": "The 'invokeLater' method in Swing is used to ensure that updates to the GUI are performed on the Event Dispatch Thread (EDT). It schedules a Runnable to be executed on the EDT, maintaining thread safety in GUI applications.",
          "code":"SwingUtilities.invokeLater(() -> { /* update GUI components */ });"
        },
        {
          "question": "What are the differences between JDBC Statement, PreparedStatement, and CallableStatement?",
          "answer": "Statement is used for executing simple SQL queries without parameters. PreparedStatement is used for executing precompiled SQL queries with parameters, providing better performance and security. CallableStatement is used to execute stored procedures in the database."
        },
        {
          "question": "What is the Java NIO package and what are its main components?",
          "answer": "The Java NIO (New I/O) package provides non-blocking I/O operations and improved performance for file and network I/O. Its main components include Channels, Buffers, Selectors, and Path API for efficient data handling."
        },
        {
          "question": "What is the difference between ByteBuffer and CharBuffer in Java NIO?",
          "answer": "ByteBuffer is used for handling binary data, allowing manipulation of byte arrays. CharBuffer is used for handling character data, providing methods for reading and writing character sequences. Both are part of the java.nio package."
        },
        {
          "question": "What are the differences between FileChannel and FileInputStream/FileOutputStream in Java?",
          "answer": "FileChannel is part of the java.nio package and provides advanced features like non-blocking I/O, memory-mapped files, and file locking. FileInputStream/FileOutputStream are part of the java.io package and provide basic blocking I/O operations."
        },
        {
          "question": "What is the purpose of the Fork/Join framework in Java?",
          "answer": "The Fork/Join framework, introduced in Java 7, is designed for parallel processing by recursively splitting tasks into smaller sub-tasks (forking) and then combining the results (joining). It improves performance in multi-core systems."
        },
        {
          "question": "What is the difference between ForkJoinPool and ExecutorService in Java?",
          "answer": "ForkJoinPool is specialized for divide-and-conquer tasks using the Fork/Join framework. ExecutorService is a higher-level interface for managing a pool of threads for concurrent tasks, providing more general-purpose concurrency management."
        },
        {
          "question": "What are the main differences between Java's concurrency utilities and traditional thread management?",
          "answer": "Java's concurrency utilities (java.util.concurrent) provide high-level abstractions like ThreadPoolExecutor, ConcurrentHashMap, and CountDownLatch, simplifying complex concurrency patterns and improving performance compared to traditional thread management with Thread and synchronized blocks."
        },
        {
          "question": "What is a ReentrantLock and how does it differ from a synchronized block?",
          "answer": "ReentrantLock is a flexible locking mechanism from java.util.concurrent.locks, providing additional features like timed and interruptible lock acquisition, and explicit lock/unlock control. Synchronized blocks offer simpler, implicit locking with less flexibility.",
          "code":"ReentrantLock lock = new ReentrantLock(); lock.lock(); try { /* critical section */ } finally { lock.unlock(); }"
        },
        {
          "question": "What is a Phaser in Java and how is it used?",
          "answer": "Phaser is a synchronization aid that allows threads to wait for each other at common barrier points. It supports multiple phases and dynamic registration of parties, making it more flexible than CyclicBarrier or CountDownLatch."
        },
        {
          "question": "What is the Java ForkJoinPool and how does it optimize parallel processing?",
          "answer": "Java ForkJoinPool is designed for parallel processing using the Fork/Join framework. It optimizes parallel processing by work-stealing, where idle threads steal tasks from busy threads, balancing the load and improving performance."
        },
        {
          "question": "What is the purpose of the java.util.concurrent package?",
          "answer": "The java.util.concurrent package provides high-level concurrency utilities, including thread pools, synchronization mechanisms, and concurrent collections, simplifying the development of concurrent and parallel applications with better performance and scalability.",
          "code":"ExecutorService executor = Executors.newFixedThreadPool(4); Future<Integer> future = executor.submit(() -> { /* computation */ });"
        },
        {
          "question": "What is the difference between CyclicBarrier and CountDownLatch?",
          "answer": "CyclicBarrier is a synchronization aid that allows a set of threads to wait at a common barrier point, resetting after all threads reach the barrier. CountDownLatch allows threads to wait until a count reaches zero, but it cannot be reset."
        },
        {
          "question": "What is the difference between Future and CompletableFuture?",
          "answer": "Future represents the result of an asynchronous computation, providing methods to check if it's done and retrieve the result. CompletableFuture extends Future with additional methods for manual completion, chaining asynchronous operations, and combining multiple futures."
        },
        {
          "question": "What is a Spliterator in Java and how does it differ from an Iterator?",
          "answer": "A Spliterator is an interface for traversing and partitioning elements of a source for parallel processing. It supports efficient parallel iteration and splitting, unlike an Iterator, which is only suitable for sequential iteration."
        },
        {
          "question": "What is a memory barrier in Java and how does it ensure memory visibility?",
          "answer": "A memory barrier is a CPU instruction that ensures memory operations before the barrier are completed before operations after it begin. In Java, the volatile keyword and synchronized blocks act as memory barriers, ensuring visibility of changes across threads."
        },
        {
          "question": "What is the difference between Serializable and Externalizable interfaces in Java?",
          "answer": "Serializable is a marker interface using default serialization, while Externalizable requires implementing readExternal() and writeExternal() methods for custom serialization. Externalizable offers more control over the serialization process.",
          "code":"public class MyClass implements Serializable { /* code here */ } public class MyClass implements Externalizable { /* code here */ }"
        },
        {
          "question": "What is method handle in Java and how is it used?",
          "answer": "Method handles, introduced in Java 7, are a low-level mechanism for method invocation, providing a flexible way to manipulate methods and constructors. They are used in the java.lang.invoke package for dynamic method invocation."
        },
        {
          "question": "What is the difference between direct and non-direct ByteBuffer?",
          "answer": "Direct ByteBuffer allocates memory outside the JVM heap, allowing more efficient I/O operations by avoiding copying data between the JVM and native memory. Non-direct ByteBuffer allocates memory on the JVM heap, which may involve extra copying during I/O operations.",
          "code":"ByteBuffer directBuffer = ByteBuffer.allocateDirect(1024); ByteBuffer nonDirectBuffer = ByteBuffer.allocate(1024);"
        },
        {
          "question": "What are varhandles in Java and how do they differ from field and array accesses?",
          "answer": "VarHandles, introduced in Java 9, provide a mechanism to access fields and array elements with flexible and safe operations, similar to method handles. They offer fine-grained control over memory operations, including atomic and volatile access."
        },
        {
          "question": "What is the difference between functional interfaces and lambda expressions?",
          "answer": "Functional interfaces are interfaces with a single abstract method, used as the target type for lambda expressions and method references. Lambda expressions provide a concise way to implement functional interfaces, representing instances of the interface."
        },
        {
          "question": "What is the purpose of the 'default' keyword in Java interfaces?",
          "answer": "The 'default' keyword allows interfaces to have concrete methods, providing default implementations that can be overridden by implementing classes. It enables backward compatibility and code reuse without breaking existing implementations.",
          "code":"public interface MyInterface { default void myMethod() { /* default implementation */ } }"
        }
      ]
    },
    {
      "category":"C programming",
      "description":"C is a general-purpose, procedural programming language developed by Dennis Ritchie in 1972",
      "questions":[
        {
          "question": "What is the main function in C?",
          "answer": "The main function in C is the entry point of any C program. It is where the program starts execution and is mandatory for all C programs."
        },
        {
          "question": "What is a variable in C?",
          "answer": "A variable in C is a storage location identified by a name that holds a value that can be modified during program execution.",
          "code":"int x = 10; // declares an integer variable x and assigns a value of 10"
        },
        {
          "question": "What are the basic data types in C?",
          "answer": "The basic data types in C are int, char, float, and double. These data types define the size and type of data that can be stored in a variable."
        },
        {
          "question": "What is a pointer in C?",
          "answer": "A pointer in C is a variable that stores the memory address of another variable. Pointers are used for dynamic memory allocation, arrays, and functions.",
          "code":"int *ptr; // declares a pointer to an integer int x = 10; ptr = &x; // stores the address of x in ptr"
        },
        {
          "question": "What is the syntax for declaring a pointer in C?",
          "answer": "The syntax for declaring a pointer in C is: data_type *pointer_name; For example, int *ptr; declares a pointer to an integer."
        },
        {
          "question": "What is the use of the & operator in C?",
          "answer": "The & operator in C is used to get the address of a variable. It is also called the address-of operator.",
          "code":"int x = 10; int *ptr = &x; // stores the address of x in ptr"
        },
        {
          "question": "What is the use of the * operator in C?",
          "answer": "The * operator in C is used to declare a pointer variable and to dereference a pointer, accessing the value stored in the address held by the pointer."
        },
        {
          "question": "What are arrays in C?",
          "answer": "Arrays in C are collections of variables of the same type, stored in contiguous memory locations. They allow for the storage and manipulation of multiple values."
        },
        {
          "question": "How do you declare an array in C?",
          "answer": "An array in C is declared using the syntax: data_type array_name[array_size]; For example, int arr[10]; declares an array of 10 integers.",
          "code":"int arr[5]; // declares an array of 5 integers char str[50]; // declares an array of 50 characters"
        },
        {
          "question": "What is a string in C?",
          "answer": "A string in C is an array of characters terminated by a null character '\\0'. Strings are used to store and manipulate text."
        },
        {
          "question": "What is a function in C?",
          "answer": "A function in C is a block of code that performs a specific task. Functions help to modularize code, making it easier to understand, maintain, and reuse.",
          "code":"int add(int a, int b) { return a + b; }"
        },
        {
          "question": "How do you declare a function in C?",
          "answer": "A function in C is declared using the syntax: return_type function_name(parameter_list); For example, int add(int a, int b); declares a function that returns an integer and takes two integer parameters."
        },
        {
          "question": "What is the difference between call by value and call by reference in C?",
          "answer": "In call by value, a copy of the actual parameter is passed to the function, so changes made inside the function do not affect the original value. In call by reference, the address of the actual parameter is passed, so changes made inside the function affect the original value.",
          "code":"void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }"
        },
        {
          "question": "What is a structure in C?",
          "answer": "A structure in C is a user-defined data type that groups related variables of different data types. Structures allow the creation of complex data types."
        },
        {
          "question": "How do you declare a structure in C?",
          "answer": "A structure in C is declared using the syntax: struct structure_name { data_type member1; data_type member2; }; For example, struct Student { int id; char name[50]; }; declares a structure named Student with an integer and a string.",
          "code":"struct Point { int x; int y; };"
        },
        {
          "question": "What is a union in C?",
          "answer": "A union in C is a user-defined data type that allows storing different data types in the same memory location. Only one member of a union can contain a value at any given time.",
          "code":"union Data { int i; float f; char str[20]; };"
        },
        {
          "question": "What is the difference between a structure and a union in C?",
          "answer": "The difference between a structure and a union in C is that a structure allocates separate memory for each member, while a union shares the same memory for all its members, saving memory but only storing one member at a time.",
          "code":"struct { int x; char y; } s; union { int x; char y; } u;"
        },
        {
          "question": "What is the printf function in C?",
          "answer": "The printf function in C is used to print formatted output to the standard output (usually the screen). It allows for various formatting options for different data types.",
          "code":"int x = 10; printf('The value of x is %d', x);"
        },
        {
          "question": "What is the scanf function in C?",
          "answer": "The scanf function in C is used to read formatted input from the standard input (usually the keyboard). It reads and stores input values into variables.",
          "code":"int x; scanf('%d', &x);"
        },
        {
          "question": "What are control flow statements in C?",
          "answer": "Control flow statements in C, such as if, else, switch, for, while, and do-while, are used to control the execution flow of the program based on conditions and loops."
        },
        {
          "question": "What is the difference between if and switch statements in C?",
          "answer": "The if statement in C is used for conditional branching based on boolean expressions, while the switch statement is used for multi-way branching based on the value of an integer or character expression."
        },
        {
          "question": "What is a loop in C?",
          "answer": "A loop in C is a control flow statement that allows repeated execution of a block of code as long as a specified condition is met. Common loops in C are for, while, and do-while.",
          "code":"for (int i = 0; i < 5; i++) { /* code here */ }"
        },
        {
          "question": "What is the difference between for and while loops in C?",
          "answer": "The for loop in C is used when the number of iterations is known beforehand, while the while loop is used when the number of iterations is not known and depends on a condition."
        },
        {
          "question": "What is a break statement in C?",
          "answer": "The break statement in C is used to terminate the execution of the nearest enclosing loop or switch statement prematurely."
        },
        {
          "question": "What is a continue statement in C?",
          "answer": "The continue statement in C is used to skip the remaining code in the current iteration of a loop and proceed to the next iteration."
        },
        {
          "question": "What is a pointer to a pointer in C?",
          "answer": "A pointer to a pointer in C is a variable that stores the address of another pointer. It is used for multi-dimensional arrays and dynamic memory allocation.",
          "code":"int x = 10; int *ptr = &x; int **pptr = &ptr;"
        },
        {
          "question": "What is dynamic memory allocation in C?",
          "answer": "Dynamic memory allocation in C is the process of allocating and deallocating memory during program execution using functions like malloc, calloc, realloc, and free from the stdlib.h library."
        },
        {
          "question": "What is the difference between malloc and calloc in C?",
          "answer": "The malloc function allocates a block of memory without initializing it, while the calloc function allocates memory and initializes all bytes to zero. Both functions return a pointer to the allocated memory."
        },
        {
          "question": "What is a null pointer in C?",
          "answer": "A null pointer in C is a pointer that does not point to any memory location. It is used to indicate that the pointer is not currently pointing to any valid object or data.",
          "code":"int *ptr = NULL; // ptr is a null pointer"
        },
        {
          "question": "What is a segmentation fault in C?",
          "answer": "A segmentation fault in C is a runtime error that occurs when a program tries to access a memory location that it is not allowed to access. It is often caused by dereferencing null or invalid pointers."
        },
        {
          "question": "What is the difference between stack memory and heap memory in C?",
          "answer": "Stack memory is used for static memory allocation, storing function parameters, local variables, and return addresses. Heap memory is used for dynamic memory allocation, where memory can be allocated and deallocated at runtime using functions like malloc and free.",
          "code":"int x; // stack memory int *ptr = malloc(sizeof(int)); // heap memory free(ptr);"
        },
        {
          "question": "What is a function pointer in C?",
          "answer": "A function pointer in C is a pointer that points to the address of a function. Function pointers can be used to pass functions as arguments to other functions, or to store addresses of functions to be called later."
        },
        {
          "question": "How do you declare and use a function pointer in C?",
          "answer": "A function pointer is declared using the syntax: return_type (*pointer_name)(parameter_list); For example, int (*fptr)(int, int); declares a pointer to a function that takes two integers and returns an integer. It is used by assigning a function's address to it and calling the function via the pointer."
        },
        {
          "question": "What are the differences between malloc and realloc in C?",
          "answer": "The malloc function allocates a specified amount of memory and returns a pointer to it, while the realloc function changes the size of an already allocated memory block. realloc can expand or shrink the memory block, preserving the existing data.",
          "code":"int *ptr = malloc(10 * sizeof(int)); ptr = realloc(ptr, 20 * sizeof(int));"
        },
        {
          "question": "What is a memory leak in C and how can it be prevented?",
          "answer": "A memory leak in C occurs when dynamically allocated memory is not properly deallocated, leading to wasted memory. It can be prevented by ensuring that every malloc or calloc call has a corresponding free call."
        },
        {
          "question": "What is the difference between a shallow copy and a deep copy in C?",
          "answer": "A shallow copy duplicates an object's structure without copying the actual data it points to, resulting in multiple pointers to the same data. A deep copy duplicates both the object's structure and the data, resulting in independent copies.",
          "code":"int *arr1 = malloc(5 * sizeof(int)); int *arr2 = arr1; // shallow copy int *arr2 = malloc(5 * sizeof(int)); memcpy(arr2, arr1, 5 * sizeof(int)); // deep copy"
        },
        {
          "question": "How do you perform file operations in C?",
          "answer": "File operations in C are performed using the standard I/O library functions like fopen, fclose, fread, fwrite, fprintf, fscanf, and fseek. These functions allow opening, closing, reading, writing, and seeking within files."
        },
        {
          "question": "What is the difference between text and binary files in C?",
          "answer": "Text files store data in human-readable format with characters encoded in ASCII or another character set, while binary files store data in a binary format, which is directly readable by the computer but not by humans. Text files handle data as sequences of characters, whereas binary files handle data as raw bytes."
        },
        {
          "question": "What are macros in C and how are they different from functions?",
          "answer": "Macros in C are preprocessor directives defined using #define that perform text substitution before compilation. Unlike functions, macros do not have type checking, can lead to code bloat, and are generally faster as they avoid function call overhead.",
          "code":"#define MAX(x, y) ((x) > (y) ? (x) : (y)) int max = MAX(a, b);"
        },
        {
          "question": "What is the purpose of the static keyword in C?",
          "answer": "The static keyword in C is used to retain the value of a variable across multiple function calls (when used with local variables) and to restrict the visibility of a variable or function to the file it is declared in (when used with global variables and functions).",
          "code":"void func() { static int count = 0; count++; printf(\"%d\\n\", count); }"
        },
        {
          "question": "What are enumerations in C and how are they used?",
          "answer": "Enumerations in C, declared using the enum keyword, define a set of named integer constants. They are used to assign names to integral values, improving code readability and maintainability."
        },
        {
          "question": "What is a typedef in C and how is it used?",
          "answer": "The typedef keyword in C creates a new name (alias) for an existing data type, making code more readable and easier to manage. For example, typedef unsigned long ulong; creates an alias ulong for unsigned long."
        },
        {
          "question": "What is the volatile keyword in C and when should it be used?",
          "answer": "The volatile keyword in C indicates that a variable's value may change unexpectedly, preventing the compiler from optimizing accesses to it. It is used for variables that may be modified by hardware or by another thread, such as memory-mapped I/O or global variables in multi-threaded programs.",
          "code":"volatile int flag = 0; while (flag == 0) { /* wait for flag to change */ }"
        },
        {
          "question": "How do you create and use dynamic arrays in C?",
          "answer": "Dynamic arrays in C are created using pointers and dynamic memory allocation functions like malloc or calloc. For example, int *arr = malloc(n * sizeof(int)); allocates memory for an array of n integers. The array can be accessed and manipulated using pointer arithmetic."
        },
        {
          "question": "What are the different storage classes in C?",
          "answer": "The different storage classes in C are auto, register, static, and extern. They determine the scope, visibility, and lifetime of variables and functions.",
          "code":"auto int x; // auto storage class register int y; // register storage class static int z; // static storage class extern int a; // extern storage class"
        },
        {
          "question": "What is the difference between an array and a linked list in C?",
          "answer": "An array is a collection of elements stored in contiguous memory locations, allowing constant-time access by index. A linked list is a collection of elements (nodes) where each node contains data and a pointer to the next node, allowing efficient insertion and deletion but requiring linear-time access by index."
        },
        {
          "question": "How do you implement a linked list in C?",
          "answer": "A linked list in C is implemented using structures. Each node contains data and a pointer to the next node. Functions are written to handle insertion, deletion, traversal, and other operations."
        },
        {
          "question": "What is a double pointer in C and how is it used?",
          "answer": "A double pointer in C is a pointer to a pointer, which allows the manipulation of the address stored in another pointer. It is used in scenarios like dynamic allocation of multidimensional arrays and functions that modify the value of a pointer passed as an argument."
        },
        {
          "question": "What are bitwise operators in C and how are they used?",
          "answer": "Bitwise operators in C perform operations on individual bits of integer types. Common bitwise operators include AND (&), OR (|), XOR (^), NOT (~), left shift (<<), and right shift (>>). They are used for low-level programming tasks, such as setting, clearing, and toggling bits.",
          "code":"int x = 5; int y = 3; int z = x & y; // bitwise AND operation"
        },
        {
          "question": "What is the difference between the pre-increment and post-increment operators in C?",
          "answer": "The pre-increment operator (++variable) increments the variable's value before using it in an expression, while the post-increment operator (variable++) increments the variable's value after using it in an expression."
        },
        {
          "question": "What are function prototypes in C and why are they important?",
          "answer": "Function prototypes in C are declarations of functions that specify their return type and parameter types without providing the function body. They are important for enabling type checking and allowing functions to be used before their actual definitions.",
          "code":"int add(int a, int b); // function prototype int main() { int sum = add(3, 5); return 0; } int add(int a, int b) { return a + b; }"
        },
        {
          "question": "What is recursion in C and when should it be used?",
          "answer": "Recursion in C is a programming technique where a function calls itself to solve smaller instances of a problem. It should be used when a problem can be naturally divided into smaller sub-problems, such as in algorithms for sorting, searching, and tree traversal."
        },
        {
          "question": "What are header files in C and how are they used?",
          "answer": "Header files in C contain declarations of functions, macros, and data types to be shared across multiple source files. They are included in source files using the #include directive, promoting code reuse and modularity."
        },
        {
          "question": "What is a makefile and how is it used in C programming?",
          "answer": "A makefile is a build automation tool that defines rules for compiling and linking C programs. It specifies dependencies between source files and the commands to build them, allowing efficient and automated compilation."
        },
        {
          "question": "What is an inline function in C and when should it be used?",
          "answer": "An inline function in C is a function defined with the inline keyword, suggesting to the compiler to insert the function's code directly at the call site, reducing the overhead of function calls. It should be used for small, frequently called functions.",
          "code":"inline int add(int a, int b) { return a + b; }"
        },
        {
          "question": "What is the difference between const and #define in C?",
          "answer": "The const keyword in C defines a constant variable with a specific type, providing type safety and scope control. The #define directive defines a macro for text substitution, which is processed by the preprocessor and lacks type safety.",
          "code":"const int MAX = 100; #define MAX 100"
        },
        {
          "question": "What is the purpose of the assert macro in C?",
          "answer": "The assert macro in C is used for debugging purposes. It evaluates a condition, and if the condition is false, it prints an error message and terminates the program. It helps to catch logical errors and validate assumptions during development."
        },
        {
          "question": "How do you handle errors in C programming?",
          "answer": "Errors in C programming are handled using error codes, return values, and the errno variable. Functions typically return a specific value to indicate success or failure, and the errno variable provides more detailed error information. Standard library functions like perror and strerror can be used to display error messages.",
          "code":"FILE *file = fopen('file.txt', 'r'); if (file == NULL) { perror('Error opening file'); exit(EXIT_FAILURE); }"
        },
        {
          "question": "What is the difference between a forward declaration and a definition in C?",
          "answer": "A forward declaration in C declares the existence of a function or variable without defining it, allowing its use before the actual definition. A definition provides the complete implementation or initialization of the function or variable."
        },
        {
          "question": "What are conditional compilation directives in C?",
          "answer": "Conditional compilation directives in C, such as #if, #ifdef, #ifndef, #else, #elif, and #endif, are used to include or exclude parts of the code based on specific conditions. They are useful for creating platform-specific code and enabling or disabling features at compile time."

        },
        {
          "question": "What is undefined behavior in C and how can it be avoided?",
          "answer": "Undefined behavior in C occurs when the code's behavior is unpredictable according to the C standard, often due to errors like dereferencing null pointers or accessing out-of-bounds array elements. It can be avoided by following best practices, using compiler warnings, and employing static analysis tools."
        },
        {
          "question": "How do you handle race conditions in multi-threaded C programs?",
          "answer": "Race conditions in multi-threaded C programs can be handled using synchronization mechanisms such as mutexes, semaphores, and condition variables to control access to shared resources and ensure proper sequencing of operations."
        },
        {
          "question": "What is the difference between setjmp and longjmp in C?",
          "answer": "setjmp and longjmp are functions used for non-local jumps in C. setjmp saves the current environment (stack context) for later use by longjmp, which restores the saved environment, allowing the program to jump back to the point where setjmp was called.",
          "code":"jmp_buf env; if (setjmp(env) == 0) { // setjmp called for the first time } else { // longjmp called to jump back to setjmp }"
        },
        {
          "question": "What are the implications of using volatile keyword in optimizing compilers?",
          "answer": "The volatile keyword tells the compiler not to optimize the access to the volatile variable, as its value may change unexpectedly. This ensures that every read and write operation occurs exactly as specified in the code, preventing issues in hardware programming or multi-threaded applications."
        },
        {
          "question": "What is the purpose of the restrict keyword in C?",
          "answer": "The restrict keyword in C is used to indicate that a pointer is the only reference to the object it points to, allowing the compiler to optimize the code by assuming no other aliases exist for the object. This can improve performance in certain scenarios.",
          "code":"void foo(int *restrict a, int *restrict b) { *a = 10; *b = 20; }"
        },
        {
          "question": "How do you implement a custom memory allocator in C?",
          "answer": "A custom memory allocator in C can be implemented by managing a large block of memory and providing functions similar to malloc, calloc, realloc, and free. It involves handling memory fragmentation, alignment, and efficient allocation and deallocation strategies."
        },
        {
          "question": "What is a memory barrier and why is it used in multi-threaded programs?",
          "answer": "A memory barrier is a compiler or CPU instruction that enforces an ordering constraint on memory operations. It prevents certain optimizations that could reorder read and write operations, ensuring proper synchronization between threads in multi-threaded programs.",
          "code":"__sync_synchronize(); // memory barrier in GCC"
        },
        {
          "question": "What are the key differences between POSIX threads (pthreads) and Windows threads in C?",
          "answer": "POSIX threads (pthreads) and Windows threads differ in their API, platform support, and some threading features. Pthreads are standardized and portable across Unix-like systems, while Windows threads are specific to the Windows operating system. Both provide similar functionality but with different function names and parameters."
        },
        {
          "question": "How do you ensure thread safety when using shared resources in C?",
          "answer": "Thread safety when using shared resources in C can be ensured by using synchronization mechanisms like mutexes, spinlocks, and reader-writer locks to control access to shared data. Careful design of critical sections and avoiding deadlocks and race conditions is crucial."
        },
        {
          "question": "What is a TLS (Thread-Local Storage) and how is it used in C?",
          "answer": "Thread-Local Storage (TLS) in C is a mechanism that provides each thread with its own instance of a variable. It is used to store data that is specific to a thread, avoiding the need for synchronization when accessing the data. TLS can be implemented using the __thread or thread_local keyword.",
          "code":"__thread int tls_var; // TLS variable in GCC thread_local int tls_var; // TLS variable in C11"
        },
        {
          "question": "What are the differences between fork and exec system calls in Unix-based systems?",
          "answer": "The fork system call creates a new process by duplicating the existing process, resulting in a parent-child relationship. The exec system call replaces the current process image with a new process image, allowing the execution of a different program within the same process.",
          "code":"pid_t pid = fork(); if (pid == 0) { // child process } else { // parent process }"
        },
        {
          "question": "What is a signal in Unix-based systems and how is it handled in C?",
          "answer": "A signal in Unix-based systems is a notification sent to a process to notify it of an event, such as an interrupt or termination request. In C, signals are handled using the signal function to set up signal handlers, which are functions that define how the process should respond to specific signals."
        },
        {
          "question": "What are the advantages and disadvantages of using macros versus inline functions in C?",
          "answer": "Macros in C provide text substitution, enabling code reuse without function call overhead, but they lack type safety and can lead to errors. Inline functions offer type safety and debugging support, and modern compilers can optimize them to reduce function call overhead.",
          "code":"#define MAX(x, y) ((x) > (y) ? (x) : (y)) inline int max(int x, int y) { return x > y ? x : y; }"
        },
        {
          "question": "How do you implement a simple garbage collector in C?",
          "answer": "Implementing a simple garbage collector in C involves tracking allocated memory blocks and periodically reclaiming memory that is no longer in use. Techniques include reference counting and mark-and-sweep algorithms, which identify and free unused memory.",
          "code":"typedef struct { void *data; size_t size; int ref_count; } Object; void *gc_malloc(size_t size) { Object *obj = malloc(sizeof(Object)); obj->data = malloc(size); obj->size = size; obj->ref_count = 1; return obj->data; } void gc_free(void *ptr) { Object *obj = find_object(ptr); if (obj != NULL) { obj->ref_count--; if (obj->ref_count == 0) { free(obj->data); free(obj); } } }"
        },
        {
          "question": "What is the purpose of the __attribute__ keyword in GCC?",
          "answer": "The __attribute__ keyword in GCC provides additional information to the compiler about the behavior of functions, variables, and types. It can be used to optimize code, specify alignment, mark deprecated functions, and more.",
          "code":"void my_function() __attribute__((deprecated));"
        },
        {
          "question": "How do you create and manage dynamically linked libraries (DLLs) in C?",
          "answer": "Creating and managing dynamically linked libraries (DLLs) in C involves compiling code into shared library files (.so on Unix-like systems, .dll on Windows), exporting functions using appropriate keywords (e.g., __declspec(dllexport) on Windows), and linking applications to these libraries at runtime.",
          "code":"gcc -shared -o mylib.so mylib.c -fPIC"
        },
        {
          "question": "What is the difference between static linking and dynamic linking in C?",
          "answer": "Static linking incorporates all library code into the executable at compile time, resulting in larger executables but independent of external libraries at runtime. Dynamic linking loads libraries at runtime, allowing for smaller executables and shared libraries but requiring the libraries to be present at runtime."
        },
        {
          "question": "What is a circular buffer and how is it implemented in C?",
          "answer": "A circular buffer, or ring buffer, is a fixed-size data structure that wraps around when it reaches the end. It is implemented using an array and two pointers (head and tail) to track the start and end of the buffer, allowing efficient use of space for producer-consumer scenarios."
        },
        {
          "question": "How do you handle endianness in C?",
          "answer": "Handling endianness in C involves writing code that can read and write data in a consistent byte order across different platforms. Techniques include using bitwise operations, shifting, and macros or functions to convert between host and network byte order (e.g., htonl, ntohl).",
          "code":"uint32_t x = 0x12345678; uint32_t network_order = htonl(x); uint32_t host_order = ntohl(network_order);"
        },
        {
          "question": "What is a memory pool and how is it used in C?",
          "answer": "A memory pool is a pre-allocated block of memory managed by a custom allocator to efficiently allocate and deallocate fixed-size memory blocks. It reduces fragmentation and improves performance in systems with frequent memory allocations and deallocations.",
          "code":"typedef struct { size_t size; void *data; } MemoryBlock; typedef struct { size_t block_size; size_t num_blocks; MemoryBlock *blocks; } MemoryPool;"
        },
        {
          "question": "What are lock-free data structures and how are they implemented in C?",
          "answer": "Lock-free data structures allow multiple threads to access and modify shared data without using locks, reducing contention and improving performance. They are implemented using atomic operations and memory ordering techniques to ensure safe concurrent access."
        },
        {
          "question": "How do you perform inter-process communication (IPC) in C?",
          "answer": "Inter-process communication (IPC) in C is performed using mechanisms like pipes, message queues, shared memory, and sockets. These mechanisms allow processes to exchange data and synchronize their actions."
        },
        {
          "question": "What is a memory-mapped file and how is it used in C?",
          "answer": "A memory-mapped file maps the contents of a file into the process's address space, allowing file I/O operations to be treated as memory operations. It is used in C with functions like mmap (Unix) or CreateFileMapping and MapViewOfFile (Windows) for efficient file access.",
          "code":"int fd = open('file.txt', O_RDWR); void *addr = mmap(NULL, file_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);"
        },
        {
          "question": "How do you implement a state machine in C?",
          "answer": "A state machine in C is implemented using a set of states, events, and transitions. It can be represented using enums for states and events, and a function pointer table or switch-case statements to handle state transitions and actions based on events."
        },
        {
          "question": "What is a coroutine and how is it implemented in C?",
          "answer": "A coroutine in C is a generalization of subroutines that allows multiple entry points and pausing and resuming of execution. It can be implemented using setjmp and longjmp, or using user-level threading libraries to manage context switching.",
          "code":"void coroutine() { static int state = 0; switch (state) { case 0: /* code here */ state = 1; break; case 1: /* code here */ state = 0; break; } }"
        },
        {
          "question": "What is a memory fence and why is it used in concurrent programming?",
          "answer": "A memory fence, or memory barrier, is a CPU instruction that enforces ordering constraints on memory operations. It ensures that memory operations before the fence are completed before those after the fence, providing synchronization in concurrent programming."
        },
        {
          "question": "How do you handle exceptions in C?",
          "answer": "C does not have built-in exception handling, but exceptions can be simulated using setjmp and longjmp for non-local jumps, or by using error codes and returning them from functions to indicate and handle errors.",
          "code":"jmp_buf env; if (setjmp(env) == 0) { // setjmp called for the first time } else { // longjmp called to jump back to setjmp }"
        },
        {
          "question": "What is a sparse array and how is it implemented in C?",
          "answer": "A sparse array is an array where most elements are zero or unoccupied. It is implemented in C using data structures like hash tables, linked lists, or specialized sparse matrix representations to store only the non-zero elements efficiently."
        },
        {
          "question": "How do you implement a priority queue in C?",
          "answer": "A priority queue in C is implemented using data structures like binary heaps, Fibonacci heaps, or balanced binary search trees. It supports operations like insertion, finding the minimum or maximum, and deletion, all based on priority.",
          "code":"typedef struct { int priority; // priority of the element int data; // data of the element } Element; typedef struct { Element *elements; // array of elements int capacity; // capacity of the priority queue int size; // current size of the priority queue } PriorityQueue;"
        },
        {
          "question": "What is the difference between a weak symbol and a strong symbol in C?",
          "answer": "A weak symbol in C is a symbol that does not cause a linker error if it is defined multiple times or not defined at all, while a strong symbol must be defined exactly once. Weak symbols are useful for providing default implementations that can be overridden."
        },
        {
          "question": "What are the potential issues with using the alloca function in C?",
          "answer": "The alloca function allocates memory on the stack, which is automatically freed when the function returns. Potential issues include stack overflow due to large allocations and undefined behavior if pointers to alloca memory are used after the function returns."
        }
      ]
    },
    {
      "category": "JavaScript",
      "description": "JavaScript is a high-level, interpreted programming language that is widely used for front-end and back-end web development.",
      "questions": [
        {
          "question": "What is JavaScript?",
          "answer": "JavaScript is a high-level, interpreted programming language."
        },
        {
          "question": "What are the key features of JavaScript?",
          "answer": "Key features include interpreted and lightweight, object-oriented, prototypal inheritance, first-class functions, dynamic typing, and browser compatibility."
        },
        {
          "question": "Explain the difference between null and undefined.",
          "answer": "null is a value representing intentional absence of any object value. undefined is a variable declared but not assigned any value."
        },
        {
          "question": "What are JavaScript data types?",
          "answer": "JavaScript has six primitive data types: undefined, null, boolean, number, string, and symbol (added in ES6). Objects are also a data type.",
          "code": "const x = 5; // number\nconst y = 'Hello'; // string\nconst z = { name: 'John' }; // object"
        },
        {
          "question": "What is the difference between == and === in JavaScript?",
          "answer": "== checks for equality after type conversion. === checks for equality without type conversion (strict equality).",
          "code": "0 == '0' // true\n0 === '0' // false"
        },
        {
          "question": "Explain what a closure is in JavaScript.",
          "answer": "A closure is a function that retains access to its lexical scope (enclosing function's scope) even when the function is executed outside that lexical scope.",
          "code": "function outer() {\n  const outerVar = 'I am outside!';\n  function inner() {\n    console.log(outerVar); // 'I am outside!'\n  }\n  return inner;\n}\nconst innerFn = outer();\ninnerFn();"
        },
        {
          "question": "What is event delegation in JavaScript?",
          "answer": "Event delegation refers to the process of using a single event listener on a parent element to manage events for its child elements.",
          "code": "document.getElementById('parent').addEventListener('click', function(event) {\n  if (event.target.tagName === 'LI') {\n    console.log('List item clicked!');\n  }\n});"
        },
        {
          "question": "How does prototypal inheritance work in JavaScript?",
          "answer": "JavaScript uses prototypal inheritance where objects can inherit properties and methods from other objects. Each object has a prototype object, and properties/methods are inherited through the prototype chain."
        },
        {
          "question": "What is the purpose of this keyword in JavaScript?",
          "answer": "The this keyword refers to the object to which a function or method belongs and is typically determined by how a function is called.",
          "code": "const person = {\n  name: 'John',\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n};\nperson.greet(); // 'Hello, my name is John'"
        },
        {
          "question": "What are JavaScript promises?",
          "answer": "Promises are objects that represent the eventual completion (or failure) of an asynchronous operation and its resulting value."
        },
        {
          "question": "Explain the difference between let, const, and var.",
          "answer": "var has function scope and can be re-declared and updated. let has block scope and can be updated but not re-declared. const has block scope and cannot be updated or re-declared.",
          "code": "var x = 1;\nlet y = 2;\nconst z = 3;"
        },
        {
          "question": "What are arrow functions in JavaScript?",
          "answer": "Arrow functions are a concise way to write function expressions in JavaScript, with a shorter syntax compared to traditional function expressions.",
          "code": "const add = (a, b) => a + b;"
        },
        {
          "question": "What is the spread operator in JavaScript?",
          "answer": "The spread operator (...) allows an iterable (like an array) to be expanded into individual elements.",
          "code": "const arr = [1, 2, 3];\nconst newArr = [...arr, 4, 5];"
        },
        {
          "question": "Explain what is meant by hoisting in JavaScript.",
          "answer": "Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their containing scope during the compile phase.",
          "code": "console.log(x); // undefined\nvar x = 5;"
        },
        {
          "question": "What are the different ways to create objects in JavaScript?",
          "answer": "Objects can be created using object literals ({}), constructor functions with new, Object.create() method, and ES6 Classes.",
          "code": "const obj = {};\nfunction Person(name) {\n  this.name = name;\n}\nconst john = new Person('John');\nconst obj = Object.create(null);"
        },
        {
          "question": "What is a callback function in JavaScript?",
          "answer": "A callback function is a function passed into another function as an argument to be executed later."
        },
        {
          "question": "What is event bubbling and how does it work in JavaScript?",
          "answer": "Event bubbling is the process where an event propagates from the element that triggered it up to its ancestors in the DOM tree.",
          "code": "document.getElementById('child').addEventListener('click', function(event) {\n  console.log('Child clicked!');\n  event.stopPropagation();\n});\ndocument.getElementById('parent').addEventListener('click', function() {\n  console.log('Parent clicked!');\n});"
        },
        {
          "question": "Explain what the bind method does in JavaScript.",
          "answer": "The bind method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
          "code": "const person = {\n  name: 'John',\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n};\nconst greet = person.greet;\nconst greetJohn = greet.bind(person);\ngreetJohn(); // 'Hello, my name is John'"
        },
        {
          "question": "What are ES6 modules?",
          "answer": "ES6 modules are a way of structuring and organizing JavaScript code by splitting it into multiple files, each having its own module scope."
        },
        {
          "question": "How can you handle errors in JavaScript?",
          "answer": "Errors in JavaScript can be handled using try, catch, and finally blocks, or by using Promise chaining with .catch().",
          "code": "try {\n  throw new Error('Something went wrong!');\n} catch (error) {\n  console.error(error.message);\n} finally {\n  console.log('Done!');\n}"
        },
        {
          "question": "What are the different types of operators in JavaScript?",
          "answer": "Operators in JavaScript include arithmetic, assignment, comparison, logical, bitwise, and ternary (conditional) operators."
        },
        {
          "question": "What is the Event Loop in JavaScript?",
          "answer": "The Event Loop is a mechanism in JavaScript that handles asynchronous operations by placing them in the event queue and executing them in sequence.",
          "code": "console.log('Hello!');\nsetTimeout(() => console.log('World!'), 0);\nconsole.log('Goodbye!');"
        },
        {
          "question": "Explain the concept of async and await in JavaScript.",
          "answer": "async and await are keywords used with asynchronous functions (async functions) to simplify writing and handling of asynchronous code, making it look synchronous.",
          "code": "async function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  return data;\n}"
        },
        {
          "question": "What is a closure in JavaScript?",
          "answer": "A closure is a feature in JavaScript where an inner function has access to the outer (enclosing) functionâ€™s variables. The inner function has access to its own scope, the outer functionâ€™s variables, and the global variables."
        },
        {
          "question": "How does JavaScript handle asynchronous code?",
          "answer": "JavaScript handles asynchronous code using callbacks, promises, async/await, and the event loop mechanism. Callbacks are functions passed as arguments to other functions, and they are executed after the operation they were passed to completes. Promises are objects representing the eventual completion or failure of an asynchronous operation, and they allow chaining multiple asynchronous operations. Async/await is syntactic sugar built on top of promises, allowing asynchronous code to be written in a synchronous-like manner. The event loop is a mechanism that allows JavaScript to perform non-blocking I/O operations by offloading operations to different threads and then queuing them in a task queue (event queue) to be executed in sequence."
        },
        {
          "question": "What is the difference between forEach and map in JavaScript?",
          "answer": "forEach and map are both methods on the Array prototype in JavaScript used to iterate over arrays. forEach executes a provided function once for each array element, but it does not return a value. map, on the other hand, executes a provided function once for each array element and constructs a new array populated with the results of calling the provided function on every element in the calling array."
        },
        {
          "question": "What are higher-order functions in JavaScript?",
          "answer": "Higher-order functions are functions that can take other functions as arguments or return them as results."
        },
        {
          "question": "What is the use of the `typeof` operator in JavaScript?",
          "answer": "`typeof` is an operator in JavaScript that returns the data type of its operand.",
          "code": "typeof 42; // 'number'\ntypeof 'Hello'; // 'string'\ntypeof true; // 'boolean'"
        },
        {
          "question": "Explain the concept of function hoisting in JavaScript.",
          "answer": "Function declarations in JavaScript are hoisted to the top of their containing scope during the compile phase, meaning they can be used before they are declared.",
          "code": "sayHello();\nfunction sayHello() {\n  console.log('Hello!');\n}"
        },
        {
          "question": "What are the differences between function declarations and function expressions in JavaScript?",
          "answer": "Function declarations are hoisted and can be used before they are declared, whereas function expressions are not hoisted. Function expressions can be anonymous or named, while function declarations are always named."
        },
        {
          "question": "What is a generator function in JavaScript?",
          "answer": "A generator function is a special type of function in JavaScript that can pause execution and resume it later, allowing them to produce a sequence of values lazily."
        },
        {
          "question": "What are template literals in JavaScript?",
          "answer": "Template literals are string literals allowing embedded expressions. They are enclosed by backticks (` `) instead of double or single quotes."
        },
        {
          "question": "Explain the concept of currying in JavaScript.",
          "answer": "Currying is a technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument.",
          "code": "function multiply(a) {\n  return function(b) {\n    return a * b;\n  };\n}\nconst multiplyByTwo = multiply(2);\nconsole.log(multiplyByTwo(3)); // 6"
        },
        {
          "question": "What is the difference between call, apply, and bind in JavaScript?",
          "answer": "`call` and `apply` are methods that allow invoking a function with a specified `this` context and arguments. `call` accepts arguments individually, while `apply` accepts arguments as an array. `bind` returns a new function with a specified `this` context and initial arguments.",
          "code": "const person = { name: 'John' };\nfunction greet(greeting) {\n  console.log(`${greeting}, ${this.name}`);\n}\ngreet.call(person, 'Hello');\ngreet.apply(person, ['Hello']);\nconst greetHello = greet.bind(person, 'Hello');\ngreetHello();"
        },
        {
          "question": "What are the new features introduced in ES6 (ECMAScript 2015)?",
          "answer": "ES6 introduced several new features such as let and const for variable declarations, arrow functions, classes, template literals, destructuring assignment, default parameters, rest parameters, spread syntax, and more."
        },
        {
          "question": "Explain the concept of object destructuring in JavaScript.",
          "answer": "Object destructuring is a convenient way to extract multiple values from an object and assign them to variables in a single statement.",
          "code": "const person = { name: 'John', age: 30 };\nconst { name, age } = person;\nconsole.log(name, age); // 'John', 30"
        },
        {
          "question": "What are the different ways to handle asynchronous code in JavaScript?",
          "answer": "Asynchronous code in JavaScript can be handled using callbacks, promises, async/await, and event listeners. Each method has its advantages depending on the use case and complexity of the asynchronous operation."
        },
        {
          "question": "What is the purpose of the `use strict` directive in JavaScript?",
          "answer": "`use strict` is a directive introduced in ES5 that enables strict mode semantics. It helps catch common coding errors and enforces stricter parsing and error handling in JavaScript."
        },
        {
          "question": "How does prototypal inheritance differ from classical inheritance?",
          "answer": "Prototypal inheritance in JavaScript involves objects inheriting properties and methods directly from other objects. Classical inheritance typically involves classes inheriting from other classes, often through a hierarchical class structure."
        },
        {
          "question": "What are the different ways to create a copy of an object in JavaScript?",
          "answer": "You can create a shallow copy of an object using object spread `{ ...obj }`, `Object.assign({}, obj)`, or `Object.create()` for prototype-based copies. For deep copies, you may need to use libraries like lodash or write custom functions."
        },
        {
          "question": "Explain the concept of memoization in JavaScript.",
          "answer": "Memoization is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again."
        },
        {
          "question": "What is the purpose of the `Array.prototype.reduce` method in JavaScript?",
          "answer": "`Array.prototype.reduce` is used to apply a function to each element in the array to reduce the array to a single value. It accumulates the results of the function applied to each element."
        },
        {
          "question": "How can you handle cross-origin requests in JavaScript?",
          "answer": "Cross-origin requests can be handled using CORS (Cross-Origin Resource Sharing). Servers can specify who can access their resources using HTTP headers like `Access-Control-Allow-Origin`."
        },
        {
          "question": "Explain the concepts of `setTimeout` and `setInterval` in JavaScript.",
          "answer": "`setTimeout` is a function that executes a function or evaluates an expression after a specified period of time. `setInterval` is a function that repeatedly executes a function or evaluates an expression at specified intervals.",
          "code": "setTimeout(() => {\n  console.log('Hello!');\n}, 1000);\nsetInterval(() => {\n  console.log('World!');\n}, 2000);"
        },
        {
          "question": "What is the EventEmitter class in Node.js?",
          "answer": "The EventEmitter class in Node.js is a core module that provides an implementation of the observer pattern. It allows objects to emit named events that cause listener functions to be called.",
          "code": "const EventEmitter = require('events');\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\nmyEmitter.emit('event');"
        },
        {
          "question": "How can you handle memory leaks in JavaScript?",
          "answer": "Memory leaks in JavaScript can be handled by removing event listeners when they are no longer needed, avoiding circular references, and using tools like Chrome DevTools for memory profiling."
        },
        {
          "question": "Explain the difference between `window.onload` and `DOMContentLoaded` events.",
          "answer": "`window.onload` waits for all resources (like images) to be loaded, while `DOMContentLoaded` fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes."
        },
        {
          "question": "What is event capturing and event bubbling in JavaScript?",
          "answer": "Event capturing and event bubbling are two phases of event propagation in the DOM. During event capturing, the event is captured by the outermost element and propagated to the target element. Event bubbling, on the other hand, propagates the event from the target element back up to the outermost element."
        },
        {
          "question": "Explain the concept of function scope and block scope in JavaScript.",
          "answer": "Function scope refers to the visibility of variables within a function. Variables declared inside a function are not accessible outside that function. Block scope refers to the visibility of variables within curly braces `{ }`, like those used in `if` statements or loops introduced in ES6 with `let` and `const`, which are not accessible outside of the block they are defined in."
        },
        {
          "question": "What are the differences between `setTimeout` and `setInterval`?",
          "answer": "`setTimeout` executes a function or evaluates an expression after a specified delay, while `setInterval` repeatedly executes a function or evaluates an expression at specified intervals, continuing until `clearInterval` is called or the window is unloaded."
        },
        {
          "question": "Explain the concept of `event.preventDefault()` in JavaScript.",
          "answer": "`event.preventDefault()` is a method that stops the default action of an event from occurring. It is commonly used to prevent form submissions or anchor clicks from navigating to another URL."
        },
        {
          "question": "What is memoization and how can you implement it in JavaScript?",
          "answer": "Memoization is a technique used to improve performance by caching the results of expensive function calls and returning the cached result when the same inputs occur again. It can be implemented using closures in JavaScript."
        },
        {
          "question": "What are the differences between `null`, `undefined`, and `NaN`?",
          "answer": "`null` represents the intentional absence of any object value. `undefined` indicates that a variable has been declared but has not been assigned a value. `NaN` stands for 'Not-a-Number' and is a value returned when a mathematical operation is intended but cannot be performed."
        },
        {
          "question": "Explain the concept of IIFE (Immediately Invoked Function Expression) in JavaScript.",
          "answer": "An IIFE is a JavaScript function that runs as soon as it is defined. It is executed immediately after being created and is typically used to create local scopes to avoid polluting the global scope."
        },
        {
          "question": "What are Web Workers in JavaScript?",
          "answer": "Web Workers are a mechanism in JavaScript that runs scripts in background threads, allowing for long-running scripts that do not interfere with the main execution thread of the web page. They enable multi-threading in web applications."
        },
        {
          "question": "Explain the concept of callback hell and how to avoid it.",
          "answer": "Callback hell refers to the nesting of multiple callbacks within each other, resulting in code that is difficult to read, maintain, and debug. To avoid callback hell, use named functions instead of anonymous functions, modularize code, and utilize promises or async/await for cleaner asynchronous code.",
          "code": "doSomething(function(result) {\n  doSomethingElse(result, function(newResult) {\n    doAnotherThing(newResult, function(finalResult) {\n      console.log(finalResult);\n    });\n  });\n});"
        }
      ]
    },
    {
      "category": "React",
      "description": "React is a JavaScript library for building user interfaces, developed by Facebook.",
      "questions": [
        {
          "question": "What is React?",
          "answer": "React is a JavaScript library for building user interfaces, developed by Facebook."
        },
        {
          "question": "What are the key features of React?",
          "answer": "Key features include virtual DOM, JSX, components, one-way data flow (unidirectional data binding), and React hooks."
        },
        {
          "question": "Explain what JSX is and its advantages.",
          "answer": "JSX (JavaScript XML) is a syntax extension for JavaScript that allows HTML to be written within JavaScript code. It provides the ability to write HTML structures in React applications, making it easier to visualize and understand component structure."
        },
        {
          "question": "What are components in React?",
          "answer": "Components are reusable building blocks for UI elements in React that encapsulate the logic and structure of a piece of the user interface."
        },
        {
          "question": "What is the difference between functional components and class components?",
          "answer": "Functional components are simpler, functional (stateless) components that use function syntax and are typically used for presenting UI. Class components are ES6 classes that extend from React.Component, maintain their own private data state, and provide more features such as lifecycle methods."
        },
        {
          "question": "What are React hooks?",
          "answer": "React hooks are functions that let you use state and other React features without writing a class component. They allow functional components to manage state and side effects.",
          "code": "const [count, setCount] = useState(0);"
        },
        {
          "question": "What is the virtual DOM (VDOM) in React?",
          "answer": "The virtual DOM is a lightweight copy of the actual DOM (Document Object Model). React uses the virtual DOM to optimize updating the UI by batch updating the real DOM only when necessary."
        },
        {
          "question": "Explain the concept of state in React.",
          "answer": "State in React is an object that represents the parts of a component's data that can change over time. It is managed internally by the component itself and can be updated using the `setState` method.",
          "code": "class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n  render() {\n    return (\n      <div>\n        <p>{this.state.count}</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>Increment</button>\n      </div>\n    );\n  }\n}"
        },
        {
          "question": "What are props in React?",
          "answer": "Props (short for properties) are inputs to components that allow the passing of data from parent to child components. They are read-only and should not be modified within the component.",
          "code": "<ChildComponent name='John' />"
        },
        {
          "question": "What is the purpose of keys in React lists?",
          "answer": "Keys are special string attributes used to give elements in arrays a stable identity. They help React identify which items have changed, are added, or are removed.",
          "code": "<ul>\n  {items.map((item) => (\n    <li key={item.id}>{item.name}</li>\n  ))}\n</ul>"
        },
        {
          "question": "Explain the concept of lifting state up in React.",
          "answer": "Lifting state up is the process of moving state from child components to their closest common ancestor (parent) component in React. It allows sharing state between multiple child components."
        },
        {
          "question": "What are controlled components in React?",
          "answer": "Controlled components in React are components where form data is controlled by React state. The input field value is controlled by state and updates only when the state changes."
        },
        {
          "question": "What are React lifecycle methods?",
          "answer": "React lifecycle methods are methods that are invoked at specific phases in a component's lifecycle. They include mounting, updating, and unmounting phases and allow developers to execute code at specific points in the component's lifecycle."
        },
        {
          "question": "What is the significance of `componentDidMount` in React components?",
          "answer": "`componentDidMount` is a lifecycle method in React that is invoked immediately after a component is mounted (inserted into the DOM tree). It is commonly used for initializations that require DOM nodes or data fetching from external sources."
        },
        {
          "question": "Explain the purpose of `React.Fragment` in React applications.",
          "answer": "`React.Fragment` is a built-in component in React that allows wrapping multiple elements without adding extra nodes to the DOM. It helps avoid unnecessary div wrappers in the component tree.",
          "code": "<React.Fragment>\n  <Child1 />\n  <Child2 />\n</React.Fragment>"
        },
        {
          "question": "What are higher-order components (HOCs) in React?",
          "answer": "Higher-order components are functions that take a component and return a new component with enhanced functionality. They are a common pattern for code reuse, logic abstraction, and component composition."
        },
        {
          "question": "What is the role of `setState()` in React?",
          "answer": "`setState()` is a method provided by React.Component used to update a component's state. When `setState()` is called, React re-renders the component and its children with the updated state.",
          "code": "this.setState({ count: this.state.count + 1 });"
        },
        {
          "question": "Explain how you can handle forms in React.",
          "answer": "Forms in React can be handled by using controlled components, where form data is controlled by React state, or by using uncontrolled components, where form data is handled by the DOM itself. React also provides form validation and submission handling using event handlers and state management.",
          "code": "class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  };\n  handleSubmit = (event) => {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  };\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type='text' value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type='submit' value='Submit' />\n      </form>\n    );\n  }\n}"
        },
        {
          "question": "What are React hooks and what problem do they solve?",
          "answer": "React hooks are functions that let you use state and other React features without writing a class component. They solve the problem of sharing stateful logic between components, improving code reuse and readability in functional components."
        },
        {
          "question": "Explain the concept of context in React and when you might use it.",
          "answer": "Context in React provides a way to pass data through the component tree without having to pass props down manually at every level. It is useful for sharing data that is considered global for a tree of React components, such as themes, user preferences, or authentication status."
        },
        {
          "question": "What is React Router and how does it work?",
          "answer": "React Router is a library that provides routing capabilities for single-page applications built with React. It enables navigation between different components or pages in the application without a full page reload.",
          "code": "import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to='/'>Home</Link>\n            </li>\n            <li>\n              <Link to='/about'>About</Link>\n            </li>\n          </ul>\n        </nav>\n        <Route path='/' exact component={Home} />\n        <Route path='/about' component={About} />\n      </div>\n    </Router>\n  );\n}"
        },
        {
          "question": "Explain the difference between `React.Component` and functional components in React.",
          "answer": "`React.Component` is a class-based component that extends the base `Component` class from React, allowing the component to have state and lifecycle methods. Functional components are simpler, functional (stateless) components that use function syntax and cannot have state or lifecycle methods until the introduction of React hooks."
        },
        {
          "question": "How can you optimize performance in React applications?",
          "answer": "Performance optimization in React can be achieved by using shouldComponentUpdate lifecycle method for preventing unnecessary re-renders, memoization with React.memo and useMemo hooks, code splitting and lazy loading with React.lazy and Suspense, optimizing images and assets, and using production build optimizations."
        },
        {
          "question": "What is the purpose of `useEffect` hook in React?",
          "answer": "`useEffect` is a hook in React that allows performing side effects in functional components. It replaces lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount."
        },
        {
          "question": "Explain the concept of portals in React.",
          "answer": "Portals in React provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. They are useful for scenarios like modals or tooltips where the content needs to break out of the parent container."
        },
        {
          "question": "What are React fragments and why are they used?",
          "answer": "React fragments (or `<>...</>` syntax) allow grouping a list of children without adding extra nodes to the DOM. They are used to avoid unnecessary wrapper elements when returning multiple elements from a component."
        },
        {
          "question": "What is the difference between `useState` and `useReducer` hooks in React?",
          "answer": "`useState` is a hook used for adding state to functional components with simpler state management. `useReducer` is a hook that provides a way to handle more complex state logic and state transitions in functional components."
        },
        {
          "question": "Explain the concept of context in React and how it is used.",
          "answer": "Context in React provides a way to pass data through the component tree without having to pass props down manually at every level. It is used with `React.createContext` and `Context.Provider` to provide data to nested components."
        },
        {
          "question": "What are React hooks rules?",
          "answer": "Hooks in React have rules that must be followed: Hooks can only be called at the top level of a functional component or custom hook, not inside loops, conditions, or nested functions. Hooks should always be called in the same order."
        },
        {
          "question": "Explain the purpose of `useContext` hook in React.",
          "answer": "`useContext` is a hook in React that allows functional components to consume data from a context created with `React.createContext`. It provides an alternative to manually passing props through multiple levels of the component tree.",
          "code": "const ThemeContext = React.createContext('light');\nfunction App() {\n  const theme = useContext(ThemeContext);\n  return <div>Current theme: {theme}</div>;\n}"
        },
        {
          "question": "What are controlled components and uncontrolled components in React forms?",
          "answer": "Controlled components are components where form data is controlled by React state. Changes to the input value are handled by state, and the input value is set by the state. Uncontrolled components allow the form data to be handled by the DOM itself."
        },
        {
          "question": "Explain the concept of conditional rendering in React.",
          "answer": "Conditional rendering in React involves rendering different components or elements based on a condition. It can be done using JavaScript conditional operators like if statements or ternary operators inside the JSX."
        },
        {
          "question": "What is the significance of `React.PureComponent`?",
          "answer": "`React.PureComponent` is similar to `React.Component`, but it implements `shouldComponentUpdate` with a shallow prop and state comparison. It prevents unnecessary renders when props and state do not change."
        },
        {
          "question": "What are keys in React and why are they important?",
          "answer": "Keys are special string attributes used by React to identify which items have changed, are added, or are removed. They help React optimize the rendering process by minimizing re-renders and keeping track of component identities in lists."
        },
        {
          "question": "Explain the concept of `React.forwardRef`.",
          "answer": "`React.forwardRef` is a function that creates a React component that forwards the ref attribute to a child component. It allows passing refs through component hierarchies, useful for cases like focus management or integrating with third-party libraries.",
          "code": "const MyComponent = React.forwardRef((props, ref) => (\n  <input ref={ref} {...props} />\n));"
        },
        {
          "question": "What is server-side rendering (SSR) in React?",
          "answer": "Server-side rendering (SSR) is the process of rendering React components on the server instead of the browser. It improves initial load time, SEO, and performance by sending fully rendered HTML to the client."
        },
        {
          "question": "Explain the concept of portals in React and why they are used.",
          "answer": "Portals in React provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. They are useful for scenarios like modals, tooltips, or notifications where the content needs to break out of the parent container."
        },
        {
          "question": "What are React Hooks and how do they differ from class components?",
          "answer": "React Hooks are functions that let you use state and other React features without writing a class. They provide a more concise and readable way to manage state, side effects, and lifecycle in functional components compared to class components."
        },
        {
          "question": "Explain the purpose of `React.memo`.",
          "answer": "`React.memo` is a higher-order component in React that memoizes the rendered output of a functional component. It prevents unnecessary re-renders by caching the result and re-rendering only when props change.",
          "code": "const MyComponent = React.memo(function MyComponent(props) {\n  /* render using props */\n});"
        },
        {
          "question": "What are the advantages of using TypeScript with React?",
          "answer": "TypeScript adds static typing to JavaScript, providing better tooling, improved code quality through type checking, easier refactoring, and improved documentation for React components and props."
        },
        {
          "question": "How can you optimize performance in React applications?",
          "answer": "Performance optimization in React can be achieved by using React.memo and useMemo for memoization, using shouldComponentUpdate, PureComponent, or React.memo for preventing unnecessary re-renders, optimizing component renders with useMemo and useCallback, code splitting with React.lazy and Suspense, and optimizing images and assets."
        },
        {
          "question": "What is the purpose of `useReducer` hook in React?",
          "answer": "`useReducer` is a hook in React that provides a way to handle more complex state logic and state transitions in functional components. It is an alternative to `useState` for managing state in components that have more intricate state logic.",
          "code": "const [state, dispatch] = useReducer(reducer, initialState);"
        },
        {
          "question": "Explain how React handles forms and form submissions.",
          "answer": "Forms in React can be handled using controlled components, where form data is controlled by React state, or uncontrolled components, where form data is handled by the DOM itself. React provides event handlers like `onChange` and `onSubmit` to manage form input and submission."
        },
        {
          "question": "What is the purpose of the `useEffect` hook in React?",
          "answer": "`useEffect` is a hook in React that allows performing side effects in functional components. It replaces lifecycle methods like `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` in class components.",
          "code": "useEffect(() => {\n  // effect code\n  return () => {\n    // cleanup code\n  };\n}, [dependencies]);"
        },
        {
          "question": "Explain the concept of lazy loading in React.",
          "answer": "Lazy loading in React involves dynamically loading components or assets only when they are needed, typically used for optimizing performance by reducing the initial bundle size and deferring loading of non-critical resources."
        },
        {
          "question": "What are the differences between `React.Fragment` and the shorthand `<>...</>` in React?",
          "answer": "`React.Fragment` and the shorthand `<>...</>` syntax both allow grouping multiple elements without adding extra nodes to the DOM. However, `<>...</>` is shorter and doesn't support keys or attributes, while `React.Fragment` does."
        },
        {
          "question": "Explain the purpose of `useContext` hook in React.",
          "answer": "`useContext` is a hook in React that allows functional components to consume data from a context created with `React.createContext`. It provides an alternative to manually passing props through multiple levels of the component tree.",
          "code": "const ThemeContext = React.createContext('light');\nfunction App() {\n  const theme = useContext(ThemeContext);\n  return <div>Current theme: {theme}</div>;\n}"
        },
        {
          "question": "What are controlled components and uncontrolled components in React forms?",
          "answer": "Controlled components are components where form data is controlled by React state. Changes to the input value are handled by state, and the input value is set by the state. Uncontrolled components allow the form data to be handled by the DOM itself."
        },
        {
          "question": "Explain the concept of conditional rendering in React.",
          "answer": "Conditional rendering in React involves rendering different components or elements based on a condition. It can be done using JavaScript conditional operators like if statements or ternary operators inside the JSX.",
          "code": "function Greeting({ isLoggedIn }) {\n  return (\n    <div>\n      {isLoggedIn ? <UserGreeting /> : <GuestGreeting />}\n    </div>\n  );\n}"
        },
        {
          "question": "What is the significance of `React.PureComponent`?",
          "answer": "`React.PureComponent` is similar to `React.Component`, but it implements `shouldComponentUpdate` with a shallow prop and state comparison. It prevents unnecessary renders when props and state do not change."
        },
        {
          "question": "What are keys in React and why are they important?",
          "answer": "Keys are special string attributes used by React to identify which items have changed, are added, or are removed. They help React optimize the rendering process by minimizing re-renders and keeping track of component identities in lists."
        },
        {
          "question": "Explain the concept of portals in React and why they are used.",
          "answer": "Portals in React provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. They are useful for scenarios like modals, tooltips, or notifications where the content needs to break out of the parent container."
        },
        {
          "question": "What are React Hooks and how do they differ from class components?",
          "answer": "React Hooks are functions that let you use state and other React features without writing a class. They provide a more concise and readable way to manage state, side effects, and lifecycle in functional components compared to class components."
        },
        {
          "question": "Explain the purpose of `React.memo`.",
          "answer": "`React.memo` is a higher-order component in React that memoizes the rendered output of a functional component. It prevents unnecessary re-renders by caching the result and re-rendering only when props change.",
          "code": "const MyComponent = React.memo(function MyComponent(props) {\n  /* render using props */\n});"
        },
        {
          "question": "What are the advantages of using TypeScript with React?",
          "answer": "TypeScript adds static typing to JavaScript, providing better tooling, improved code quality through type checking, easier refactoring, and improved documentation for React components and props."
        },
        {
          "question": "How can you optimize performance in React applications?",
          "answer": "Performance optimization in React can be achieved by using React.memo and useMemo for memoization, using shouldComponentUpdate, PureComponent, or React.memo for preventing unnecessary re-renders, optimizing component renders with useMemo and useCallback, code splitting with React.lazy and Suspense, and optimizing images and assets."
        },
        {
          "question": "What is the purpose of the `useReducer` hook in React?",
          "answer": "`useReducer` is a hook in React that provides a way to handle more complex state logic and state transitions in functional components. It is an alternative to `useState` for managing state in components that have more intricate state logic.",
          "code": "const [state, dispatch] = useReducer(reducer, initialState);"
        },
        {
          "question": "Explain how React handles forms and form submissions.",
          "answer": "Forms in React can be handled using controlled components, where form data is controlled by React state, or uncontrolled components, where form data is handled by the DOM itself. React provides event handlers like `onChange` and `onSubmit` to manage form input and submission.",
          "code": "class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  };\n  handleSubmit = (event) => {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  };\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type='text' value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type='submit' value='Submit' />\n      </form>\n    );\n  }\n}"
        }
      ]
    },
    {
      "category": "Python",
      "description": "Python is a high-level, interpreted programming language known for its simplicity and readability.",
      "questions": [
        {
          "question": "What is Python?",
          "answer": "Python is a high-level, interpreted programming language known for its simplicity and readability."
        },
        {
          "question": "What are the key features of Python?",
          "answer": "Key features include dynamic typing, automatic memory management, readability, support for multiple programming paradigms (procedural, object-oriented, functional), and extensive standard libraries."
        },
        {
          "question": "Explain the differences between Python 2.x and Python 3.x.",
          "answer": "Python 3.x is the current version and is not backwards compatible with Python 2.x. Python 3.x emphasizes simplicity and removes old, redundant features from Python 2.x, such as `print` being a function, integer division returning float, and Unicode support by default."
        },
        {
          "question": "What are Python decorators and how do they work?",
          "answer": "Decorators in Python are functions that modify the functionality of another function or method. They are used to wrap another function, modifying its behavior.",
          "code": "def my_decorator(func):\n  def wrapper():\n    print('Something is happening before the function is called.')\n    func()\n    print('Something is happening after the function is called.')\n  return wrapper\n@my_decorator\ndef say_hello():\n  print('Hello!')\nsay_hello()"
        },
        {
          "question": "What are Python generators?",
          "answer": "Generators in Python are functions that enable us to create iterators. They generate values in an iterative manner using `yield` rather than `return`."
        },
        {
          "question": "Explain the difference between `__str__` and `__repr__` in Python.",
          "answer": "`__str__` is used to find the 'informal' or nicely printable string representation of an object, while `__repr__` is used to find the 'official' string representation of an object.",
          "code": "class Person:\n  def __init__(self, name):\n    self.name = name\n  def __str__(self):\n    return f'Person({self.name})'\n  def __repr__(self):\n    return f'Person({self.name})'"
        },
        {
          "question": "How are lists different from tuples in Python?",
          "answer": "Lists are mutable (modifiable) sequences, while tuples are immutable (cannot be changed). Lists use square brackets `[]`, whereas tuples use parentheses `()`.",
          "code": "my_list = [1, 2, 3]\nmy_tuple = (1, 2, 3)\nmy_list[0] = 4\n# my_tuple[0] = 4  # Error: 'tuple' object does not support item assignment"
        },
        {
          "question": "What are Python's built-in data types?",
          "answer": "Python's built-in data types include integers, floats, complex numbers, strings, lists, tuples, dictionaries, sets, and booleans."
        },
        {
          "question": "Explain the concept of *args and **kwargs in Python function parameters.",
          "answer": "`*args` and `**kwargs` allow a function to accept variable-length argument lists. `*args` collects extra positional arguments as a tuple, while `**kwargs` collects extra keyword arguments as a dictionary.",
          "code": "def example(*args, **kwargs):\n  print(args)\n  print(kwargs)\nexample(1, 2, a='apple', b='banana')"
        },
        {
          "question": "What is a lambda function in Python?",
          "answer": "A lambda function in Python is a small anonymous function defined with the `lambda` keyword. It can have any number of arguments but only one expression. Lambda functions are syntactically restricted to a single expression.",
          "code": "add = lambda x, y: x + y\nprint(add(2, 3)) # 5"
        },
        {
          "question": "Explain Python's `pass` statement.",
          "answer": "`pass` is a null statement in Python, used as a placeholder where syntax requires a statement but you have nothing to write."
        },
        {
          "question": "What is the purpose of `__init__` method in Python classes?",
          "answer": "`__init__` is a special method in Python classes that is automatically called when a new instance of the class is created. It initializes the object's attributes.",
          "code": "class Person:\n  def __init__(self, name):\n    self.name = name\njohn = Person('John')"
        },
        {
          "question": "How are exceptions handled in Python?",
          "answer": "Exceptions in Python are handled using try-except blocks. Code that might raise an exception is written in the `try` block, and handling of the exception is implemented in the `except` block.",
          "code": "try:\n  x = 1 / 0\nexcept ZeroDivisionError as e:\n  print('Error:', e)"
        },
        {
          "question": "What is the difference between `__getattr__` and `__getattribute__` in Python?",
          "answer": "`__getattr__` is called when an attribute lookup has not found the attribute in the usual places, while `__getattribute__` is called for every attribute access."
        },
        {
          "question": "Explain the usage of `with` statement in Python.",
          "answer": "The `with` statement in Python is used to wrap the execution of a block of code within methods defined by the context manager. It ensures that cleanup is properly handled, even if exceptions occur."
        },
        {
          "question": "What are Python modules and packages?",
          "answer": "Modules are Python files containing Python definitions and statements. Packages are namespaces that contain multiple modules."
        },
        {
          "question": "Explain the difference between `__str__` and `__repr__` in Python.",
          "answer": "`__str__` is used to find the 'informal' or nicely printable string representation of an object, while `__repr__` is used to find the 'official' string representation of an object.",
          "code": "class Person:\n  def __init__(self, name):\n    self.name = name\n  def __str__(self):\n    return f'Person({self.name})'\n  def __repr__(self):\n    return f'Person({self.name})'"
        },
        {
          "question": "How do you handle file I/O in Python?",
          "answer": "File I/O in Python is handled using file objects with methods such as `open()`, `read()`, `write()`, `close()`, and using context managers with the `with` statement for automatic cleanup."
        },
        {
          "question": "What are Python decorators and how do they work?",
          "answer": "Decorators in Python are functions that modify the functionality of another function or method. They are used to wrap another function, modifying its behavior."
        },
        {
          "question": "What are Python generators?",
          "answer": "Generators in Python are functions that enable us to create iterators. They generate values in an iterative manner using `yield` rather than `return`."
        },
        {
          "question": "Explain the difference between `__str__` and `__repr__` in Python.",
          "answer": "`__str__` is used to find the 'informal' or nicely printable string representation of an object, while `__repr__` is used to find the 'official' string representation of an object.",
          "code": "class Person:\n  def __init__(self, name):\n    self.name = name\n  def __str__(self):\n    return f'Person({self.name})'\n  def __repr__(self):\n    return f'Person({self.name})'"
        },
        {
          "question": "What are Python's built-in data types?",
          "answer": "Python's built-in data types include integers, floats, complex numbers, strings, lists, tuples, dictionaries, sets, and booleans."
        },
        {
          "question": "Explain the concept of *args and **kwargs in Python function parameters.",
          "answer": "`*args` and `**kwargs` allow a function to accept variable-length argument lists. `*args` collects extra positional arguments as a tuple, while `**kwargs` collects extra keyword arguments as a dictionary.",
          "code": "def example(*args, **kwargs):\n  print(args)\n  print(kwargs)\nexample(1, 2, a='apple', b='banana')"
        },
        {
          "question": "What is a lambda function in Python?",
          "answer": "A lambda function in Python is a small anonymous function defined with the `lambda` keyword. It can have any number of arguments but only one expression. Lambda functions are syntactically restricted to a single expression."
        },
        {
          "question": "Explain Python's `pass` statement.",
          "answer": "`pass` is a null statement in Python, used as a placeholder where syntax requires a statement but you have nothing to write."
        },
        {
          "question": "What is the purpose of `__init__` method in Python classes?",
          "answer": "`__init__` is a special method in Python classes that is automatically called when a new instance of the class is created. It initializes the object's attributes."
        },
        {
          "question": "What are Python iterators?",
          "answer": "Iterators in Python are objects that implement the iterator protocol, consisting of the `__iter__()` method that returns the iterator object itself and the `__next__()` method that returns the next item in the sequence."
        },
        {
          "question": "Explain the difference between `__iter__()` and `__next__()` methods in Python.",
          "answer": "`__iter__()` returns the iterator object itself and is called when the iterator is initialized. `__next__()` returns the next item in the sequence and is called subsequently to fetch the next item.",
          "code": "class MyIterator:\n  def __init__(self, max=0):\n    self.max = max\n    self.n = 0\n  def __iter__(self):\n    return self\n  def __next__(self):\n    if self.n <= self.max:\n      result = 2 ** self.n\n      self.n += 1\n      return result\n    else:\n      raise StopIteration\nmy_iter = MyIterator(3)\nfor i in my_iter:\n  print(i)"
        },
        {
          "question": "What is the difference between `range()` and `xrange()` in Python 2.x?",
          "answer": "`range()` in Python 2.x returns a list, while `xrange()` returns an xrange object which is an iterator and yields values on demand, making it more memory efficient for large ranges.",
          "code": "for i in xrange(5):\n  print(i)"
        },
        {
          "question": "Explain the concept of list comprehensions in Python.",
          "answer": "List comprehensions provide a concise way to create lists. They consist of brackets containing an expression followed by a `for` clause, then zero or more `for` or `if` clauses."
        },
        {
          "question": "What are Python decorators and how do they work?",
          "answer": "Decorators in Python are functions that modify the functionality of another function or method. They are used to wrap another function, modifying its behavior."
        },
        {
          "question": "What are Python generators?",
          "answer": "Generators in Python are functions that enable us to create iterators. They generate values in an iterative manner using `yield` rather than `return`."
        },
        {
          "question": "Explain the concept of closures in Python.",
          "answer": "Closures in Python are functions that retain the environment in which they were created. They remember the outer function's variables even after the outer function has finished executing.",
          "code": "def outer_func(x):\n  def inner_func(y):\n    return x + y\n  return inner_func\nadd_five = outer_func(5)\nprint(add_five(3)) # 8"
        },
        {
          "question": "How do you handle file I/O in Python?",
          "answer": "File I/O in Python is handled using file objects with methods such as `open()`, `read()`, `write()`, `close()`, and using context managers with the `with` statement for automatic cleanup.",
          "code": "with open('file.txt', 'r') as file:\n  data = file.read()\nprint(data)"
        },
        {
          "question": "What are context managers in Python?",
          "answer": "Context managers in Python are objects that define the runtime context to be established when executing a `with` statement. They implement `__enter__()` and `__exit__()` methods to set up and tear down the context."
        },
        {
          "question": "Explain the usage of `enumerate()` function in Python.",
          "answer": "`enumerate()` function adds a counter to an iterable and returns it as an enumerate object. This is useful for obtaining an indexed list along with the values obtained from iterating over it."
        },
        {
          "question": "What is the purpose of `__name__` variable in Python?",
          "answer": "`__name__` is a special variable in Python that is automatically set for the module in which the code is running. It is mainly used for testing or executing the code within the module."
        },
        {
          "question": "Explain the usage of `map()` function in Python.",
          "answer": "`map()` function applies a given function to all the items in an input iterable and returns an iterator of the results. It allows you to apply a function to each item in a list or other iterable.",
          "code": "def square(x):\n  return x * x\nnumbers = [1, 2, 3, 4]\nsquared = list(map(square, numbers))"
        },
        {
          "question": "What are Python's magic methods (special methods)?",
          "answer": "Magic methods in Python are special methods that start and end with double underscores (`__`). They enable customization of how objects behave in operations such as addition, comparison, and type conversion."
        },
        {
          "question": "Explain the difference between `__str__()` and `__repr__()` in Python.",
          "answer": "`__str__()` is used to find the 'informal' or nicely printable string representation of an object, while `__repr__()` is used to find the 'official' string representation of an object."
        },
        {
          "question": "What is the purpose of `__init__()` method in Python classes?",
          "answer": "`__init__()` is a special method in Python classes that is automatically called when a new instance of the class is created. It initializes the object's attributes."
        },
        {
          "question": "Explain how Python's garbage collection works.",
          "answer": "Python uses reference counting and a garbage collector to manage memory. Objects are automatically deallocated when their reference count reaches zero, and cyclic references are handled by the garbage collector."
        },
        {
          "question": "How do you handle exceptions in Python?",
          "answer": "Exceptions in Python are handled using try-except blocks. Code that might raise an exception is written in the `try` block, and handling of the exception is implemented in the `except` block."
        },
        {
          "question": "What are Python modules and packages?",
          "answer": "Modules are Python files containing Python definitions and statements. Packages are namespaces that contain multiple modules."
        },
        {
          "question": "What is the purpose of `sys.argv` in Python?",
          "answer": "`sys.argv` is a list in Python that contains command-line arguments passed to a script. The first item in the list is the script's name."
        },
        {
          "question": "Explain the use of `super()` function in Python.",
          "answer": "`super()` function in Python is used to call a method from a parent class. It allows access to methods and properties of a parent class.",
          "code": "class Parent:\n  def __init__(self, name):\n    self.name = name\n\nclass Child(Parent):\n  def __init__(self, name, age):\n    super().__init__(name)\n    self.age = age"
        },
        {
          "question": "What are Python's built-in decorators?",
          "answer": "Python's built-in decorators include `@staticmethod` and `@classmethod`. `@staticmethod` defines a method that does not access or modify class state and is bound to the class rather than an instance. `@classmethod` defines a method that operates on the class rather than instances."
        },
        {
          "question": "Explain the Global Interpreter Lock (GIL) in Python.",
          "answer": "The Global Interpreter Lock (GIL) in Python is a mutex that protects access to Python objects, preventing multiple native threads from executing Python bytecodes at once. This can limit multi-threading performance in CPU-bound tasks but does not affect I/O-bound tasks."
        },
        {
          "question": "What is the purpose of `__slots__` in Python classes?",
          "answer": "`__slots__` is used in Python classes to explicitly declare instance attributes and allocate space for them in memory. It can improve memory usage and performance for classes with a large number of instances.",
          "code": "class Person:\n  __slots__ = ['name', 'age']\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age"
        },
        {
          "question": "Explain the usage of `__getitem__()` and `__setitem__()` methods in Python.",
          "answer": "`__getitem__()` and `__setitem__()` are special methods in Python used for indexing and accessing elements of objects. `__getitem__()` allows retrieving items using square bracket notation, while `__setitem__()` allows assigning items using square bracket notation."
        },
        {
          "question": "What is the purpose of `functools` module in Python?",
          "answer": "The `functools` module in Python provides higher-order functions and operations on callable objects. It includes functions like `partial()` for partial function application, `reduce()` for applying a function to a sequence, and `lru_cache()` for caching function results."
        },
        {
          "question": "Explain the concept of Python's `asyncio` module.",
          "answer": "`asyncio` is a library in Python that provides infrastructure for writing asynchronous I/O-bound and high-level concurrent code using coroutines. It allows managing event loops, asynchronous tasks, and synchronization primitives."
        },
        {
          "question": "What are Python descriptors?",
          "answer": "Descriptors in Python are objects that define methods `__get__()`, `__set__()`, or `__delete__()` which allow for fine-grained control over attribute access. They are used to create properties, methods, and classes with automatic method invocation."
        },
        {
          "question": "Explain the concept of metaclasses in Python.",
          "answer": "Metaclasses in Python are classes that define the behavior and structure of other classes. They are used for customizing class creation, adding or modifying class attributes and methods, and controlling the initialization of new class instances."
        },
        {
          "question": "What are type annotations in Python?",
          "answer": "Type annotations in Python allow specifying the type of variables, function parameters, and return values. They provide optional static typing for improved code readability, documentation, and tooling support, although they do not enforce type constraints at runtime."
        },
        {
          "question": "Explain the usage of `__enter__()` and `__exit__()` methods in Python context managers.",
          "answer": "`__enter__()` and `__exit__()` methods are used in Python context managers to define the entry and exit points of the runtime context established by the `with` statement. They handle resource management and cleanup."
        },
        {
          "question": "What are f-strings in Python?",
          "answer": "F-strings in Python are formatted string literals prefixed with 'f' or 'F'. They allow embedding expressions inside string literals, making string formatting concise and readable."
        },
        {
          "question": "Explain the purpose of `__all__` attribute in Python modules.",
          "answer": "`__all__` is a list in Python modules that specifies the names of public objects (functions, classes, variables) that should be imported when `from module import *` is used. It controls what is accessible to the outside world.",
          "code": "__all__ = ['public_func', 'PublicClass']"
        },
        {
          "question": "What is the purpose of `__doc__` attribute in Python?",
          "answer": "`__doc__` is a special attribute in Python that holds the docstring or documentation string of a module, class, function, or method. It is used to provide documentation and help text."
        },
        {
          "question": "Explain the concept of Python's `logging` module.",
          "answer": "`logging` is a built-in module in Python that provides a flexible framework for logging messages from Python programs. It allows logging messages with different severity levels, configuring log handlers and formatters, and integrating with various output destinations."
        },
        {
          "question": "What is the purpose of `__call__` method in Python?",
          "answer": "`__call__` method in Python allows an instance of a class to be called as if it were a function. It is useful for creating callable objects that maintain state across multiple calls."
        }
      ]
    },
    {
      "category": "SQL",
      "description": "SQL (Structured Query Language) is a standard language for relational database management systems.",
      "questions": [
        {
          "question": "What is SQL?",
          "answer": "SQL (Structured Query Language) is a standard language for relational database management systems. It is used to interact with databases to store, manipulate, and retrieve data."
        },
        {
          "question": "What are the different types of SQL statements?",
          "answer": "SQL statements include Data Definition Language (DDL) statements (CREATE, ALTER, DROP), Data Manipulation Language (DML) statements (SELECT, INSERT, UPDATE, DELETE), Data Control Language (DCL) statements (GRANT, REVOKE), and Transaction Control Language (TCL) statements (COMMIT, ROLLBACK)."
        },
        {
          "question": "Explain the difference between SQL and MySQL.",
          "answer": "SQL is a language used to query and operate on databases, while MySQL is a specific implementation of a relational database management system (RDBMS) that uses SQL as its querying language."
        },
        {
          "question": "What is a primary key in SQL?",
          "answer": "A primary key in SQL is a column or a set of columns that uniquely identifies each row in a table. It enforces entity integrity and ensures that no duplicate rows exist."
        },
        {
          "question": "What is the difference between `INNER JOIN` and `LEFT JOIN`?",
          "answer": "`INNER JOIN` returns rows when there is a match in both tables based on the join condition. `LEFT JOIN` returns all rows from the left table and the matched rows from the right table, with unmatched rows in the right table filled with NULLs."
        },
        {
          "question": "Explain the concept of foreign key in SQL.",
          "answer": "A foreign key in SQL is a column or a set of columns that establishes a link between data in two tables. It enforces referential integrity by ensuring that the values in the foreign key column(s) match the primary key values in the referenced table.",
          "code": "CREATE TABLE Orders (\n  OrderID int PRIMARY KEY,\n  ProductID int,\n  FOREIGN KEY (ProductID) REFERENCES Products(ProductID)\n)"
        },
        {
          "question": "What is normalization in SQL and why is it important?",
          "answer": "Normalization in SQL is the process of organizing data in a database to reduce redundancy and dependency. It improves data integrity, reduces storage space, and facilitates efficient querying."
        },
        {
          "question": "What are SQL indexes and why are they used?",
          "answer": "SQL indexes are data structures that improve the speed of data retrieval operations on a database table at the cost of additional space and decreased performance for write operations. They are used to quickly locate and access rows."
        },
        {
          "question": "Explain the difference between `HAVING` and `WHERE` clauses in SQL.",
          "answer": "`WHERE` clause filters rows before any groupings are made, whereas `HAVING` clause filters rows after groups are applied. `HAVING` is used with `GROUP BY` to filter groups based on a specified condition.",
          "code": "SELECT Department, COUNT(*)\nFROM Employees\nGROUP BY Department\nHAVING COUNT(*) > 10"
        },
        {
          "question": "What is a SQL subquery?",
          "answer": "A SQL subquery is a query nested inside another query (main query). It can be used within `SELECT`, `INSERT`, `UPDATE`, or `DELETE` statements to return data that will be used in the main query."
        },
        {
          "question": "Explain the ACID properties in the context of SQL databases.",
          "answer": "ACID (Atomicity, Consistency, Isolation, Durability) properties ensure the reliability of transactions in SQL databases. Atomicity ensures that transactions are treated as a single unit, Consistency ensures that data meets all integrity constraints, Isolation ensures that transactions are independent and isolated from each other, and Durability ensures that committed transactions are permanent and survive system failures."
        },
        {
          "question": "What is the difference between `UNION` and `UNION ALL` in SQL?",
          "answer": "`UNION` combines and returns the results of two or more `SELECT` statements without duplicates, while `UNION ALL` combines and returns all rows, including duplicates, from two or more `SELECT` statements."
        },
        {
          "question": "Explain the concept of SQL injection.",
          "answer": "SQL injection is a technique used to exploit vulnerabilities in an application's software that interacts with SQL databases. Attackers inject malicious SQL code into input fields to manipulate the database or gain unauthorized access.",
          "code": "SELECT * FROM Users WHERE Username = 'admin' AND Password = '' OR '1'='1'"
        },
        {
          "question": "What is a trigger in SQL?",
          "answer": "A trigger in SQL is a set of SQL statements that automatically `triggers` or executes in response to specific events on a particular table or view in a database. Triggers are used to enforce business rules, validate data, or perform actions like updating other tables."
        },
        {
          "question": "Explain the concept of views in SQL.",
          "answer": "A view in SQL is a virtual table created by a query. It behaves like a table but does not store data physically. Views are used to simplify complex queries, enforce security by restricting access to specific columns or rows, and provide a layer of abstraction."
        },
        {
          "question": "What are the advantages and disadvantages of SQL?",
          "answer": "Advantages of SQL include its simplicity, scalability, and standardization across database systems. Disadvantages include limited support for non-relational data types, potential performance bottlenecks, and complex queries requiring optimization."
        },
        {
          "question": "Explain the difference between `ROLLBACK` and `COMMIT` in SQL.",
          "answer": "`ROLLBACK` undoes all changes made in the current transaction and restores the database to its state before the transaction began. `COMMIT` saves all changes made in the current transaction permanently to the database.",
          "code": "BEGIN TRANSACTION;\nUPDATE Employees SET Salary = Salary * 1.1;\nCOMMIT;"
        },
        {
          "question": "What is the purpose of the `LIKE` operator in SQL?",
          "answer": "The `LIKE` operator in SQL is used in a `WHERE` clause to search for a specified pattern in a column. It is often used with wildcard characters (`%` for zero or more characters, `_` for a single character) to perform flexible string matching.",
          "code": "SELECT * FROM Products WHERE ProductName LIKE 'Ch%';"
        },
        {
          "question": "Explain the concept of SQL joins.",
          "answer": "SQL joins are used to combine rows from two or more tables based on a related column between them. Common types of joins include `INNER JOIN`, `LEFT JOIN`, `RIGHT JOIN`, and `FULL JOIN`."
        },
        {
          "question": "What is the difference between a clustered index and a non-clustered index in SQL?",
          "answer": "A clustered index in SQL determines the physical order of data rows in a table based on the indexed column(s). A table can have only one clustered index. A non-clustered index does not affect the physical order of data rows and can be created on multiple columns."
        },
        {
          "question": "Explain the concept of transactions in SQL.",
          "answer": "A transaction in SQL is a logical unit of work that comprises one or more SQL statements. Transactions ensure data integrity by guaranteeing that all operations within the transaction are completed successfully (committed) or rolled back (aborted) as a unit."
        },
        {
          "question": "Explain the concept of aggregate functions in SQL.",
          "answer": "Aggregate functions in SQL perform a calculation on a set of values and return a single value. Examples include `SUM()`, `AVG()`, `COUNT()`, `MIN()`, and `MAX()`. They are often used with `GROUP BY` to summarize data."
        },
        {
          "question": "What is a self-join in SQL?",
          "answer": "A self-join in SQL is a join that joins a table to itself. It is used to retrieve related records in the same table, such as finding employees who have the same manager.",
          "code": "SELECT e1.Name, e2.Name AS Manager\nFROM Employees e1\nJOIN Employees e2 ON e1.ManagerID = e2.EmployeeID"
        },
        {
          "question": "Explain the difference between `TRUNCATE` and `DELETE` statements in SQL.",
          "answer": "`TRUNCATE` is a DDL statement that removes all rows from a table and resets identity columns, whereas `DELETE` is a DML statement that removes specific rows based on a condition. `TRUNCATE` is faster but cannot be rolled back.",
          "code": "TRUNCATE TABLE Employees;\nDELETE FROM Employees WHERE Department = 'HR';"
        },
        {
          "question": "What are correlated subqueries in SQL?",
          "answer": "Correlated subqueries in SQL are subqueries that reference a column from the outer query. They execute once for each row processed by the outer query, making them dependent on the outer query's results."
        },
        {
          "question": "Explain the concept of normalization and its different forms.",
          "answer": "Normalization in SQL is the process of organizing data in a database to reduce redundancy and dependency, improving data integrity and efficiency. Forms of normalization include First Normal Form (1NF), Second Normal Form (2NF), Third Normal Form (3NF), and Boyce-Codd Normal Form (BCNF)."
        },
        {
          "question": "What is the difference between `UNIQUE` and `PRIMARY KEY` constraints in SQL?",
          "answer": "`UNIQUE` constraint ensures that all values in a column are unique, but multiple columns can have unique values. `PRIMARY KEY` constraint is a combination of `UNIQUE` and `NOT NULL` constraints and uniquely identifies each record in a table.",
          "code": "CREATE TABLE Products (\n  ProductID int PRIMARY KEY,\n  ProductName varchar(255) UNIQUE\n)"
        },
        {
          "question": "Explain the difference between `HAVING` and `WHERE` clauses in SQL.",
          "answer": "`WHERE` clause filters rows before any groupings are made, whereas `HAVING` clause filters rows after groups are applied. `HAVING` is used with `GROUP BY` to filter groups based on a specified condition.",
          "code": "SELECT Department, COUNT(*)\nFROM Employees\nGROUP BY Department\nHAVING COUNT(*) > 10"
        },
        {
          "question": "What is a recursive SQL query?",
          "answer": "A recursive SQL query is a query that refers to itself in order to return hierarchical data from a table. It uses the `WITH RECURSIVE` syntax in SQL."
        },
        {
          "question": "Explain the concept of SQL views and their advantages.",
          "answer": "A view in SQL is a virtual table created by a query. It behaves like a table but does not store data physically. Advantages of views include simplified complex queries, enhanced security by restricting access to specific columns or rows, and providing a layer of abstraction."
        },
        {
          "question": "What are the ACID properties in the context of SQL transactions?",
          "answer": "ACID (Atomicity, Consistency, Isolation, Durability) properties ensure the reliability of transactions in SQL databases. Atomicity ensures that transactions are treated as a single unit, Consistency ensures that data meets all integrity constraints, Isolation ensures that transactions are independent and isolated from each other, and Durability ensures that committed transactions are permanent and survive system failures."
        },
        {
          "question": "Explain the concept of database indexing and its advantages.",
          "answer": "Database indexing in SQL is the process of creating an index on a table to improve data retrieval performance. Indexes allow the database server to quickly locate and access specific rows based on the indexed column(s), reducing the need for full table scans."
        },
        {
          "question": "What are SQL transactions and how are they managed?",
          "answer": "A transaction in SQL is a logical unit of work that comprises one or more SQL statements. Transactions ensure data integrity by guaranteeing that all operations within the transaction are completed successfully (committed) or rolled back (aborted) as a unit. They are managed using `COMMIT`, `ROLLBACK`, and `SAVEPOINT` statements."
        },
        {
          "question": "Explain the difference between `INNER JOIN`, `LEFT JOIN`, and `RIGHT JOIN`.",
          "answer": "`INNER JOIN` returns rows when there is a match in both tables based on the join condition. `LEFT JOIN` returns all rows from the left table and the matched rows from the right table, with unmatched rows in the right table filled with NULLs. `RIGHT JOIN` is similar to `LEFT JOIN` but returns all rows from the right table and the matched rows from the left table.",
          "code": "SELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID"
        },
        {
          "question": "What is the purpose of the `CASE` statement in SQL?",
          "answer": "The `CASE` statement in SQL is used to create conditional logic within a query. It evaluates a list of conditions and returns one of several possible result expressions based on those conditions.",
          "code": "SELECT Name, Salary,\nCASE\n  WHEN Salary > 50000 THEN 'High'\n  WHEN Salary > 30000 THEN 'Medium'\n  ELSE 'Low'\nEND AS SalaryCategory\nFROM Employees"
        },
        {
          "question": "Explain the concept of SQL normalization and its benefits.",
          "answer": "SQL normalization is the process of organizing data in a database to reduce redundancy and dependency, improving data integrity and efficiency. It eliminates data anomalies such as insertion, update, and deletion anomalies."
        },
        {
          "question": "What are the different types of SQL joins?",
          "answer": "SQL joins are used to combine rows from two or more tables based on a related column between them. Types of SQL joins include `INNER JOIN`, `LEFT JOIN`, `RIGHT JOIN`, `FULL JOIN`, `CROSS JOIN`, and `SELF JOIN`."
        },
        {
          "question": "Explain the difference between `UNION` and `UNION ALL` in SQL.",
          "answer": "`UNION` combines and returns the results of two or more `SELECT` statements without duplicates, while `UNION ALL` combines and returns all rows, including duplicates, from two or more `SELECT` statements.",
          "code": "SELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers"
        },
        {
          "question": "What is the purpose of the `GROUP BY` clause in SQL?",
          "answer": "`GROUP BY` clause in SQL is used to group rows that have the same values into summary rows, such as finding the total sales by region.",
          "code": "SELECT Region, SUM(Sales) AS TotalSales\nFROM Orders\nGROUP BY Region"
        },
        {
          "question": "Explain the concept of SQL indexes and their types.",
          "answer": "SQL indexes are data structures that improve the speed of data retrieval operations on a database table by providing quick access to rows. Types of SQL indexes include primary keys, unique constraints, clustered indexes, and non-clustered indexes."
        },
        {
          "question": "What is the difference between a clustered and non-clustered index in SQL?",
          "answer": "A clustered index in SQL determines the physical order of data rows in a table based on the indexed column(s). A table can have only one clustered index. A non-clustered index does not affect the physical order of data rows and can be created on multiple columns."
        },
        {
          "question": "Explain the purpose of `ROLLBACK` and `COMMIT` statements in SQL transactions.",
          "answer": "`ROLLBACK` undoes all changes made in the current transaction and restores the database to its state before the transaction began. `COMMIT` saves all changes made in the current transaction permanently to the database."
        },
        {
          "question": "What is the difference between `WHERE` and `HAVING` clauses in SQL?",
          "answer": "`WHERE` clause filters rows before any groupings are made, whereas `HAVING` clause filters rows after groups are applied. `HAVING` is used with `GROUP BY` to filter groups based on a specified condition.",
          "code": "SELECT Department, COUNT(*)\nFROM Employees\nGROUP BY Department\nHAVING COUNT(*) > 10"
        },
        {
          "question": "Explain the concept of SQL triggers and their usage.",
          "answer": "SQL triggers are special types of stored procedures that automatically execute in response to specific events (e.g., `INSERT`, `UPDATE`, `DELETE`) on a particular table or view in a database. Triggers are used to enforce business rules, validate data, or perform actions like updating other tables."
        },
        {
          "question": "What is the purpose of the `LIKE` operator in SQL?",
          "answer": "The `LIKE` operator in SQL is used in a `WHERE` clause to search for a specified pattern in a column. It is often used with wildcard characters (`%` for zero or more characters, `_` for a single character) to perform flexible string matching.",
          "code": "SELECT * FROM employees WHERE last_name LIKE 'S%'"
        },
        {
          "question": "Explain the concept of SQL injection and how to prevent it.",
          "answer": "SQL injection is a technique used to exploit vulnerabilities in an application's software that interacts with SQL databases. Attackers inject malicious SQL code into input fields to manipulate the database or gain unauthorized access. To prevent SQL injection, use prepared statements (parameterized queries), input validation, and escape characters.",
          "code": "SELECT * FROM Users WHERE Username = 'admin' AND Password = '' OR '1'='1'"
        }
      ]
    },
    {
      "category": "Rust",
      "description": "Rust is a systems programming language focused on safety, speed, and concurrency.",
      "questions": [
        {
          "question": "What is Rust?",
          "answer": "Rust is a systems programming language focused on safety, speed, and concurrency. It is designed to prevent common programming errors such as null pointer dereferencing and buffer overflows."
        },
        {
          "question": "What are some key features of Rust?",
          "answer": "Key features of Rust include memory safety, zero-cost abstractions, concurrency without data races, and a strong, static type system."
        },
        {
          "question": "How does Rust ensure memory safety?",
          "answer": "Rust ensures memory safety through its ownership system, which includes rules around ownership, borrowing, and lifetimes that prevent data races and dangling pointers."
        },
        {
          "question": "What is ownership in Rust?",
          "answer": "Ownership in Rust is a set of rules that governs how memory is managed. Each value in Rust has a single owner, and the memory is freed when the owner goes out of scope."
        },
        {
          "question": "What are borrowing and references in Rust?",
          "answer": "Borrowing allows you to create references to data without taking ownership. There are two types of borrowing: immutable (read-only) and mutable (read and write).",
          "code": "fn main() {\n  let mut x = 5;\n  let y = &x; // immutable borrow\n  let z = &mut x; // mutable borrow\n}"
        },
        {
          "question": "What is a slice in Rust?",
          "answer": "A slice is a dynamically-sized view into a contiguous sequence of elements in a collection, such as an array or vector.",
          "code": "fn main() {\n  let arr = [1, 2, 3, 4, 5];\n  let slice = &arr[1..3];\n  println!(\"{:?}\", slice);\n}"
        },
        {
          "question": "What are traits in Rust?",
          "answer": "Traits in Rust define shared behavior in an abstract way. They are similar to interfaces in other languages and can be implemented by different types."
        },
        {
          "question": "What is pattern matching in Rust?",
          "answer": "Pattern matching in Rust allows you to destructure and match complex data structures, making it easier to handle different cases in your code.",
          "code": "fn main() {\n  let x = 5;\n  match x {\n    1 => println!(\"One\"),\n    2 => println!(\"Two\"),\n    _ => println!(\"Other\"),\n  }\n}"
        },
        {
          "question": "What is the `Option` type in Rust?",
          "answer": "The `Option` type in Rust is used to represent a value that can be either `Some` (a value is present) or `None` (no value)."
        },
        {
          "question": "What is the `Result` type in Rust?",
          "answer": "The `Result` type in Rust is used for error handling and represents either `Ok` (success) or `Err` (failure).",
          "code": "fn divide(x: i32, y: i32) -> Result<i32, &'static str> {\n  if y == 0 {\n    Err(\"Division by zero\")\n  } else {\n    Ok(x / y)\n  }\n}"
        },
        {
          "question": "What is a macro in Rust?",
          "answer": "Macros in Rust are a way of writing code that writes other code (metaprogramming). They are used to reduce boilerplate and increase code reuse."
        },
        {
          "question": "What is a closure in Rust?",
          "answer": "A closure in Rust is an anonymous function that can capture variables from its enclosing scope. Closures are often used for short-lived functions.",
          "code": "fn main() {\n  let add = |x, y| x + y;\n  println!(\"{}\", add(1, 2));\n}"
        },
        {
          "question": "How does Rust handle concurrency?",
          "answer": "Rust handles concurrency with its ownership model, ensuring that data races are prevented at compile time. It provides safe abstractions like threads and channels.",
          "code": "use std::thread;\nuse std::sync::mpsc;\n\nfn main() {\n  let (tx, rx) = mpsc::channel();\n  thread::spawn(move || {\n    tx.send(42).unwrap();\n  });\n  let received = rx.recv().unwrap();\n  println!(\"Received: {}\", received);\n}"
        },
        {
          "question": "What is a crate in Rust?",
          "answer": "A crate in Rust is a package of Rust code. It can be a library or a binary, and it is the fundamental unit of code distribution in Rust."
        },
        {
          "question": "What is Cargo in Rust?",
          "answer": "Cargo is Rust's build system and package manager. It handles tasks such as dependency management, compilation, and running tests.",
          "code": "cargo new my_project\n\ncd my_project\n\ncargo build\n\ncargo run"
        },
        {
          "question": "What is a module in Rust?",
          "answer": "A module in Rust is a way to organize code into separate namespaces, making it easier to manage large codebases."
        },
        {
          "question": "What is the `match` keyword in Rust?",
          "answer": "The `match` keyword in Rust is used for pattern matching, allowing you to branch your code based on the value of an expression.",
          "code": "fn main() {\n  let x = 5;\n  match x {\n    1 => println!(\"One\"),\n    2 => println!(\"Two\"),\n    _ => println!(\"Other\"),\n  }\n}"
        },
        {
          "question": "What is the difference between `String` and `&str` in Rust?",
          "answer": "`String` is a growable, heap-allocated data structure, whereas `&str` is an immutable reference to a string slice.",
          "code": "fn main() {\n  let s1 = String::from(\"hello\");\n  let s2: &str = \"world\";\n}"
        },
        {
          "question": "What are lifetimes in Rust?",
          "answer": "Lifetimes in Rust are a way to specify how long references should be valid, preventing dangling references and ensuring memory safety."
        },
        {
          "question": "What is the purpose of the `unsafe` keyword in Rust?",
          "answer": "The `unsafe` keyword in Rust allows you to perform operations that are not checked by the compiler's safety guarantees, such as dereferencing raw pointers or calling unsafe functions.",
          "code": "unsafe fn unsafe_function() {\n  // unsafe code here\n}"
        },
        {
          "question": "What is the difference between `Rc` and `Arc` in Rust?",
          "answer": "`Rc` (Reference Counted) is used for single-threaded scenarios to enable multiple ownership of data. `Arc` (Atomic Reference Counted) is similar but designed for multi-threaded environments, providing thread-safe reference counting."
        },
        {
          "question": "How does Rust's borrow checker work?",
          "answer": "The borrow checker ensures memory safety by enforcing rules around borrowing and lifetimes. It checks that references do not outlive their data and that mutable references are not aliased."
        },
        {
          "question": "What are lifetimes and why are they important in Rust?",
          "answer": "Lifetimes are annotations that tell the Rust compiler how long references should be valid. They prevent dangling references and ensure memory safety by checking that references do not outlive the data they point to."
        },
        {
          "question": "What is the purpose of the `async` and `await` keywords in Rust?",
          "answer": "The `async` keyword allows functions to be executed asynchronously, returning a future. The `await` keyword is used to pause execution until the future is complete, enabling asynchronous programming in Rust.",
          "code": "async fn fetch_data() -> Result<String, reqwest::Error> {\n  let response = reqwest::get(\"https://example.com\").await?;\n  response.text().await\n}"
        },
        {
          "question": "Explain the difference between `Box`, `Rc`, and `Arc`.",
          "answer": "`Box` is used for heap allocation and single ownership. `Rc` is for single-threaded multiple ownership with reference counting. `Arc` is similar to `Rc` but is thread-safe, suitable for multi-threaded scenarios.",
          "code": "fn main() {\n  let b = Box::new(5);\n  let rc = Rc::new(10);\n  let arc = Arc::new(15);\n}"
        },
        {
          "question": "What are Rust macros and how do they differ from functions?",
          "answer": "Macros in Rust are a form of metaprogramming that allows you to write code that generates other code. They differ from functions in that they operate on the syntax level and can produce complex patterns that functions cannot."
        },
        {
          "question": "What is the difference between `move` and `clone` in Rust?",
          "answer": "`move` transfers ownership of data from one variable to another, leaving the original variable invalid. `clone` creates a deep copy of the data, allowing both variables to own separate instances.",
          "code": "fn main() {\n  let x = vec![1, 2, 3];\n  let y = x.clone();\n  let z = x;\n}"
        },
        {
          "question": "Explain the concept of 'trait objects' in Rust.",
          "answer": "Trait objects allow for dynamic dispatch in Rust, enabling polymorphism. They are created using the `dyn` keyword and can be used to call methods on types that implement a specific trait without knowing the exact type at compile time.",
          "code": "trait Animal {\n  fn speak(&self);\n}\n\nstruct Dog;\nimpl Animal for Dog {\n  fn speak(&self) {\n    println!(\"Woof!\");\n  }\n}\n\nfn main() {\n  let dog: Box<dyn Animal> = Box::new(Dog);\n  dog.speak();\n}"
        },
        {
          "question": "How does Rust's type inference work?",
          "answer": "Rust's type inference allows the compiler to deduce the types of variables and expressions based on their usage and context, reducing the need for explicit type annotations."
        },
        {
          "question": "What are generics in Rust and how are they used?",
          "answer": "Generics allow for the creation of flexible and reusable functions, structs, enums, and traits by allowing them to operate on different types without sacrificing type safety."
        },
        {
          "question": "Explain the difference between `Cow` and `Rc` in Rust.",
          "answer": "`Cow` (Clone on Write) allows for efficient borrowing and cloning, providing mutable access to immutable data only when necessary. `Rc` (Reference Counted) enables shared ownership of data with reference counting but does not provide mutation capabilities.",
          "code": "use std::borrow::Cow;\nuse std::rc::Rc;\n\nfn main() {\n  let s: Cow<str> = Cow::Borrowed(\"hello\");\n  let rc: Rc<i32> = Rc::new(42);\n}"
        },
        {
          "question": "What is a `Pin` in Rust and when is it used?",
          "answer": "`Pin` is a type that prevents data from being moved in memory, ensuring that the data stays at a fixed location. It is used in scenarios where moving data could cause issues, such as with self-referential structs."
        },
        {
          "question": "How do you handle errors in Rust?",
          "answer": "Rust handles errors using the `Result` and `Option` types. `Result` is used for operations that can fail, returning either `Ok` for success or `Err` for failure. `Option` is used for optional values that can be `Some` or `None`."
        },
        {
          "question": "What is the purpose of the `RefCell` type in Rust?",
          "answer": "`RefCell` provides interior mutability, allowing for mutable access to data even when the `RefCell` itself is immutable. It uses runtime borrow checking to ensure memory safety.",
          "code": "use std::cell::RefCell;\n\nfn main() {\n  let x = RefCell::new(5);\n  let mut y = x.borrow_mut();\n  *y += 1;\n}"
        },
        {
          "question": "Explain the difference between `&str` and `String` in Rust.",
          "answer": "`&str` is a borrowed string slice, representing an immutable view into a string. `String` is an owned, heap-allocated, growable string."
        },
        {
          "question": "What are the advantages and disadvantages of Rust's ownership model?",
          "answer": "Advantages include guaranteed memory safety and the prevention of data races. Disadvantages can include a steep learning curve and the need to explicitly manage lifetimes and ownership."
        },
        {
          "question": "What is the purpose of the `unsafe` keyword in Rust?",
          "answer": "The `unsafe` keyword allows you to perform operations that are not checked by the compiler's safety guarantees, such as dereferencing raw pointers or calling unsafe functions. It is used to bypass Rust's safety checks when necessary."
        },
        {
          "question": "How does Rust achieve zero-cost abstractions?",
          "answer": "Rust achieves zero-cost abstractions by ensuring that high-level abstractions compile down to efficient, low-level code without runtime overhead, thanks to its powerful type system and optimizations by the compiler."
        },
        {
          "question": "What is the `?` operator and how is it used in Rust?",
          "answer": "The `?` operator is used for error propagation in Rust. It simplifies error handling by returning the error if the `Result` is `Err`, or unwrapping the value if it is `Ok`."
        },
        {
          "question": "What is the difference between `map` and `and_then` methods on `Option` and `Result` types?",
          "answer": "`map` transforms the contained value of `Option` or `Result` using a provided function. `and_then` (or `flatMap` in other languages) chains multiple operations that may also return `Option` or `Result`, avoiding nested types."
        },
        {
          "question": "Explain the concept of `async/await` and how it compares to other asynchronous models in Rust.",
          "answer": "Rust's `async/await` model is built on top of futures, which are lazy and poll-based. This model allows writing asynchronous code that looks synchronous, making it easier to read and maintain. Compared to other models like callback-based or event-loop-driven systems, `async/await` in Rust provides more straightforward error handling and better integration with Rust's ownership and type systems."
        },
        {
          "question": "What are procedural macros in Rust and how are they different from declarative macros?",
          "answer": "Procedural macros in Rust are functions that generate code at compile time using Rust syntax trees. They allow for more complex transformations and code generation than declarative macros, which are simpler and use pattern matching to transform code. Procedural macros can be used to create custom derive macros, attribute macros, and function-like macros."
        },
        {
          "question": "How does Rust's borrow checker handle closures capturing their environment?",
          "answer": "Rust's borrow checker analyzes closures to determine how they capture their environment: by value, by reference, or by mutable reference. The capture mode depends on how the closure uses the captured variables. This ensures that the captured variables follow Rust's borrowing rules, preventing data races and ensuring memory safety."
        },
        {
          "question": "What are the limitations of Rust's trait system and how can they be mitigated?",
          "answer": "Rust's trait system does not support certain features like inheritance, which can limit code reuse and extensibility. To mitigate these limitations, Rust developers use composition, trait bounds, and generic programming to achieve polymorphism and code reuse without sacrificing performance or safety."
        },
        {
          "question": "Explain the concept of interior mutability in Rust and provide an example of when it might be necessary.",
          "answer": "Interior mutability in Rust allows for mutability in data structures that are otherwise immutable. This is achieved through types like `RefCell` and `Cell`, which provide runtime-checked mutable access. An example of when it might be necessary is when you need to mutate state inside an immutable data structure, such as updating a cache or maintaining counters in a read-only context."
        },
        {
          "question": "What is a `Pin` in Rust and why is it important for self-referential structs?",
          "answer": "A `Pin` in Rust is a pointer that prevents data from being moved in memory, ensuring that the data stays at a fixed location. This is important for self-referential structs, which contain pointers to their own fields, as moving the struct would invalidate those pointers. `Pin` guarantees the safety of such data structures."
        },
        {
          "question": "How do you implement a custom allocator in Rust and what are the potential use cases?",
          "answer": "To implement a custom allocator in Rust, you need to define a type that implements the `GlobalAlloc` or `Allocator` trait. This involves defining methods for memory allocation, deallocation, and reallocation. Custom allocators can be used for specialized memory management needs, such as optimizing performance for specific workloads or integrating with non-standard memory systems."
        },
        {
          "question": "Explain the concept of zero-cost abstractions in Rust and provide an example.",
          "answer": "Zero-cost abstractions in Rust are high-level constructs that compile down to efficient, low-level code with no runtime overhead. An example is Rust's iterator trait, which allows for complex data processing pipelines without incurring performance penalties. The compiler optimizes these abstractions into loops and direct memory accesses, ensuring performance comparable to handwritten code."
        },
        {
          "question": "What are the challenges of implementing safe concurrent programming in Rust?",
          "answer": "Challenges of implementing safe concurrent programming in Rust include dealing with shared state, avoiding deadlocks, and ensuring memory safety. Rust's ownership and borrowing system helps prevent data races, but it requires careful design to ensure that mutable state is accessed safely across threads. Tools like `Mutex`, `RwLock`, and atomic types help manage concurrency, but developers must still handle the complexity of synchronization and potential deadlocks."
        },
        {
          "question": "How does Rust's ownership model affect FFI (Foreign Function Interface) with C libraries?",
          "answer": "Rust's ownership model affects FFI with C libraries by requiring careful handling of ownership and lifetimes for pointers passed between Rust and C. Rust developers must ensure that pointers to data are valid for the expected duration and that memory safety is maintained. This often involves using raw pointers, `unsafe` blocks, and careful manual memory management to bridge the differences between Rust's safety guarantees and C's unrestricted access."
        },
        {
          "question": "What is the `Send` trait and how does it ensure thread safety in Rust?",
          "answer": "The `Send` trait in Rust indicates that a type can be transferred safely between threads. A type that implements `Send` ensures that all its components can be safely sent to another thread, preventing data races. The Rust compiler uses the `Send` trait to enforce thread safety by restricting non-`Send` types from being moved across thread boundaries."
        },
        {
          "question": "Describe the process of implementing an asynchronous trait in Rust.",
          "answer": "Implementing an asynchronous trait in Rust involves defining a trait with async methods and implementing it for a struct. The async methods return `Future` types, which represent deferred computations. The trait implementation must handle asynchronous behavior using Rust's async/await syntax and potentially leverage async runtimes like `tokio` or `async-std` to execute the asynchronous code."
        },
        {
          "question": "What are the trade-offs between using `Box`, `Rc`, and `Arc` in Rust for heap allocation and reference counting?",
          "answer": "`Box` provides single ownership and is used for heap allocation with no reference counting overhead. `Rc` provides reference counting for single-threaded scenarios, allowing multiple owners but incurring the cost of reference count updates. `Arc` extends `Rc` with atomic reference counting for thread-safe multiple ownership, which is more costly due to atomic operations but necessary for concurrent environments."
        },
        {
          "question": "Explain the concept of associated types in Rust and provide an example.",
          "answer": "Associated types in Rust are a way to define placeholder types within a trait, allowing for more flexibility and reducing the need for explicit generic parameters. For example, the `Iterator` trait uses an associated type `Item` to specify the type of elements it yields, simplifying the trait's usage and implementation."
        },
        {
          "question": "How does Rust's `no_std` environment differ from the standard library, and when would you use it?",
          "answer": "The `no_std` environment in Rust excludes the standard library, providing only core functionality for systems programming and embedded development. It is used in resource-constrained environments or when the full standard library is not available. Developers use `no_std` to create highly efficient and minimalistic binaries, often relying on external crates for additional functionality."
        },
        {
          "question": "What are the differences between `Result<T, E>` and `Option<T>` in Rust, and when would you use each?",
          "answer": "`Result<T, E>` represents either a successful value (`Ok(T)`) or an error (`Err(E)`), providing a way to handle errors explicitly. `Option<T>` represents an optional value, being either `Some(T)` or `None`, without error information. Use `Result` when error handling is required and `Option` when the presence or absence of a value is sufficient."
        },
        {
          "question": "How do you create a custom derive macro in Rust?",
          "answer": "Creating a custom derive macro in Rust involves defining a procedural macro that generates code based on the input struct or enum. This requires using the `syn` crate to parse the input syntax tree and the `quote` crate to generate the output code. The macro is then registered using the `proc_macro_derive` attribute."
        },
        {
          "question": "Explain how Rust's `unsafe` code interacts with the borrow checker.",
          "answer": "Rust's `unsafe` code bypasses the borrow checker's guarantees, allowing operations that are not checked for safety, such as dereferencing raw pointers or manipulating memory directly. While `unsafe` blocks provide more flexibility, the developer must ensure that the code inside these blocks adheres to Rust's safety invariants, as the compiler will not enforce them."
        },
        {
          "question": "What is the purpose of the `PhantomData` type in Rust, and when would you use it?",
          "answer": "`PhantomData` in Rust is a zero-sized type used to indicate ownership or lifetime relationships between generic types without storing actual data. It is used to satisfy the borrow checker and ensure correct variance and drop-checking behavior, especially in cases where the type system needs to understand ownership without actual data being present."
        },
        {
          "question": "Describe the process of integrating Rust with an existing C codebase.",
          "answer": "Integrating Rust with an existing C codebase involves using Rust's FFI capabilities. This requires declaring `extern` functions and types in Rust that correspond to the C code, ensuring correct memory layout and calling conventions. Rust code can call C functions directly and vice versa. Tools like `bindgen` can automate the generation of Rust bindings for C libraries, simplifying the integration process."
        }
      ]
    },
    {
      "category": "Operating Systems",
      "description": "Operating systems are the software that manage computer hardware and provide common services for computer programs.",
      "questions": [
        {
          "question": "What is an operating system?",
          "answer": "An operating system (OS) is system software that manages computer hardware and software resources and provides common services for computer programs. The OS acts as an intermediary between users and the computer hardware."
        },
        {
          "question": "What are the main functions of an operating system?",
          "answer": "The main functions of an operating system include process management, memory management, file system management, device management, and security and access control. It ensures efficient and fair resource allocation among users and applications."
        },
        {
          "question": "Explain the concept of a kernel.",
          "answer": "The kernel is the core component of an operating system. It manages system resources, facilitates communication between hardware and software, and provides essential services like process scheduling, memory management, and device control."
        },
        {
          "question": "What is the difference between a monolithic kernel and a microkernel?",
          "answer": "A monolithic kernel is a single large process running entirely in a single address space, where all operating system services like file management, memory management, and device drivers run in kernel space. A microkernel, on the other hand, runs most services in user space as separate processes, with only the most essential functions (like IPC and basic scheduling) running in kernel space, making it more modular and potentially more secure."
        },
        {
          "question": "Describe the different types of operating systems.",
          "answer": "Batch Operating Systems: Execute jobs in batches without user interaction. Time-Sharing Systems: Allow multiple users to use the computer simultaneously by quickly switching between them. Distributed Systems: Use multiple machines to provide a cohesive computing environment. Real-Time Systems: Provide immediate processing and response to input. Embedded Systems: Designed to operate within a larger system with specific functionality."
        },
        {
          "question": "What is a process in an operating system?",
          "answer": "A process is an instance of a running program. It contains the program code, its current activity represented by the value of the program counter, the contents of the processor's registers, and the variables stored in memory. The OS manages processes to ensure efficient execution and resource allocation."
        },
        {
          "question": "Explain the difference between a process and a thread.",
          "answer": "A process is an independent program in execution, with its own memory space. A thread is the smallest unit of execution within a process, sharing the same memory space and resources. Multiple threads within a process can execute concurrently."
        },
        {
          "question": "What is process scheduling?",
          "answer": "Process scheduling is the method by which the OS decides which process runs at any given time. It aims to allocate CPU time efficiently and fairly among all processes, using algorithms like First-Come-First-Served (FCFS), Shortest Job Next (SJN), Round Robin (RR), and Priority Scheduling."
        },
        {
          "question": "What are the different states of a process?",
          "answer": "A process typically goes through the following states: New: The process is being created. Ready: The process is waiting to be assigned to a processor. Running: The process is executing on the processor. Waiting/Blocked: The process is waiting for some event to occur (e.g., I/O completion). Terminated: The process has finished execution."
        },
        {
          "question": "What is a context switch?",
          "answer": "A context switch is the process of storing the state of a currently running process and restoring the state of another process. This allows multiple processes to share a single CPU, giving the illusion of parallelism. Context switching is essential for multitasking but incurs overhead due to the need to save and load process states."
        },
        {
          "question": "What is a process control block (PCB)?",
          "answer": "A PCB is a data structure used by the operating system to store all the information about a process. This includes process state, process ID, CPU registers, memory management information, accounting information, and I/O status information."
        },
        {
          "question": "What is inter-process communication (IPC)?",
          "answer": "IPC is a mechanism that allows processes to communicate with each other and synchronize their actions. Methods of IPC include pipes, message queues, shared memory, and semaphores."
        },
        {
          "question": "What is a deadlock?",
          "answer": "A deadlock is a situation in which a set of processes is blocked because each process is holding a resource and waiting for another resource held by another process in the set. This causes a cycle of dependencies that prevents any of the processes from proceeding."
        },
        {
          "question": "What are the necessary conditions for a deadlock to occur?",
          "answer": "The necessary conditions for a deadlock are: Mutual Exclusion: At least one resource must be held in a non-shareable mode. Hold and Wait: A process holding at least one resource is waiting to acquire additional resources held by other processes. No Preemption: Resources cannot be preempted; they must be released voluntarily by the process holding them. Circular Wait: A set of processes are waiting in a circular chain where each process is waiting for a resource held by the next process in the chain."
        },
        {
          "question": "How can deadlocks be prevented?",
          "answer": "Deadlocks can be prevented by ensuring that at least one of the necessary conditions does not hold: Mutual Exclusion: Making resources sharable whenever possible. Hold and Wait: Requiring processes to request all required resources at once. No Preemption: Allowing the OS to preempt resources from a process. Circular Wait: Imposing a total ordering on resource acquisition and ensuring that processes request resources in an increasing order."
        },
        {
          "question": "What is memory management?",
          "answer": "Memory management is the function of an operating system that handles or manages primary memory. It keeps track of each byte in a computerâ€™s memory and manages the allocation and deallocation of memory spaces as needed by programs during execution."
        },
        {
          "question": "What is virtual memory?",
          "answer": "Virtual memory is a memory management technique that provides an 'idealized abstraction of the storage resources' that are actually available on a given machine. It creates the illusion to users of a very large (main) memory by using hardware and software to allow a computer to compensate for physical memory shortages, by temporarily transferring data from random access memory to disk storage."
        },
        {
          "question": "What is paging?",
          "answer": "Paging is a memory management scheme that eliminates the need for contiguous allocation of physical memory. It breaks physical memory into fixed-sized blocks called frames and breaks logical memory into blocks of the same size called pages. When a process is to be executed, its pages are loaded into any available memory frames from the backing store."
        },
        {
          "question": "What is segmentation?",
          "answer": "Segmentation is a memory management technique that divides the process into segments. A segment is a logical unit such as a main function, data, or global variables. Each segment has a name and a length. The user specifies each address by two quantities: a segment name and an offset."
        },
        {
          "question": "What is a page fault?",
          "answer": "A page fault occurs when a program tries to access a block of memory that is not currently in physical memory (RAM). The operating system must then retrieve the data from virtual memory (disk storage) and load it into RAM. This can slow down the execution of a program."
        },
        {
          "question": "What are the differences between paging and segmentation?",
          "answer": "Paging: Divides memory into fixed-size pages, simplifies memory allocation, no external fragmentation but internal fragmentation can occur. Segmentation: Divides memory into variable-size segments, aligns with the logical division of a program, can have both internal and external fragmentation."
        },
        {
          "question": "What is demand paging?",
          "answer": "Demand paging is a method of virtual memory management where pages of data are not copied from disk to RAM until they are needed (i.e., on demand). This helps in reducing the amount of memory required for processes and in improving the efficiency of memory use."
        },
        {
          "question": "What is thrashing?",
          "answer": "Thrashing occurs when a computer's virtual memory subsystem is in a state of constant paging, leading to a significant slowdown in performance. This typically happens when there is insufficient physical memory (RAM) to support the processes running on the system."
        },
        {
          "question": "What is the difference between internal and external fragmentation?",
          "answer": "Internal Fragmentation: Occurs when allocated memory may have some unused space that cannot be used by other processes. External Fragmentation: Occurs when there is enough total free memory space but it is not contiguous; memory blocks are scattered, making it difficult to allocate to processes."
        },
        {
          "question": "What is a memory leak?",
          "answer": "A memory leak occurs when a computer program incorrectly manages memory allocations. Memory that is no longer needed is not released, causing a gradual loss of available memory. This can lead to degraded performance or system crashes over time."
        },
        {
          "question": "What is a file system?",
          "answer": "A file system is a method and data structure that an operating system uses to control how data is stored and retrieved. Without a file system, data placed in storage would be one large block of data with no way to tell where one piece of information stops and the next begins."
        },
        {
          "question": "What are the main types of file systems?",
          "answer": "The main types of file systems include: Disk-Based File Systems: Used on hard drives, SSDs, and other physical storage devices. Network File Systems: Allow files to be shared, accessed, and managed over a network. Distributed File Systems: Manage storage across multiple networked servers."
        },
        {
          "question": "What is a file descriptor?",
          "answer": "A file descriptor is a small integer used to uniquely identify an open file within a process. It is used by Unix-like operating systems to access files, network connections, or other I/O objects."
        },
        {
          "question": "What is RAID?",
          "answer": "RAID (Redundant Array of Independent Disks) is a data storage virtualization technology that combines multiple physical disk drive components into one or more logical units for the purposes of data redundancy, performance improvement, or both."
        },
        {
          "question": "What are the different RAID levels?",
          "answer": "RAID 0: Striped disk array without fault tolerance. RAID 1: Mirrored disk array without parity or striping. RAID 5: Block-level striping with distributed parity. RAID 10: Striped set of mirrored drives."
        },
        {
          "question": "What is disk scheduling?",
          "answer": "Disk scheduling is the process of determining the most efficient way to access and manage disk I/O requests. It aims to minimize seek time and latency while maximizing disk throughput and efficiency."
        },
        {
          "question": "What is a journaling file system?",
          "answer": "A journaling file system maintains a log (journal) of changes to the file system before actually committing them to the main file system. This helps in recovering from system crashes or power failures without the need for lengthy consistency checks during reboot."
        },
        {
          "question": "What is a device driver?",
          "answer": "A device driver is a specialized program that allows a higher-level computer program to interact with a hardware device. It provides a standard interface for the OS to control and communicate with hardware devices, abstracting the details of hardware access."
        },
        {
          "question": "What is virtualization in operating systems?",
          "answer": "Virtualization is the process of creating a virtual (rather than physical) version of a computing resource, such as a server, storage device, or network resource. It allows multiple operating systems and applications to run on a single physical machine."
        },
        {
          "question": "What is virtualization in performance tuning?",
          "answer": "Virtualization in performance tuning refers to optimizing the performance of virtualized environments, ensuring efficient resource allocation, minimizing overhead, and improving overall system responsiveness and scalability."
        },
        {
          "question": "What is a system call?",
          "answer": "A system call is a request in a Unix-like operating system made via a software interrupt by an active process for a service performed by the kernel."
        },
        {
          "question": "What is a shell?",
          "answer": "A shell is a program that serves as the command-line interpreter on Unix-like systems. It provides a user interface for access to an operating system's services. Common Unix shells include Bash, sh, and zsh."
        },
        {
          "question": "What is a semaphore?",
          "answer": "A semaphore is a synchronization object used to control access to a common resource by multiple processes or threads. It maintains a count to limit the number of processes or threads that can access the resource simultaneously."
        },
        {
          "question": "What is a mutex?",
          "answer": "A mutex (short for mutual exclusion object) is a synchronization primitive used to ensure that only one thread can access a resource or a critical section of code at a time. It provides exclusive access to shared resources and prevents data races."
        },
        {
          "question": "What is paging in virtual memory?",
          "answer": "Paging in virtual memory is a memory management scheme that eliminates the need for contiguous allocation of physical memory. It breaks physical memory into fixed-sized blocks called frames and breaks logical memory into blocks of the same size called pages."
        },
        {
          "question": "What is deadlock prevention?",
          "answer": "Deadlock prevention refers to techniques and strategies used to avoid or eliminate the occurrence of deadlocks in computer systems. These techniques typically involve breaking one or more of the necessary conditions for deadlock formation."
        },
        {
          "question": "What is CPU scheduling?",
          "answer": "CPU scheduling is the process by which the operating system decides which processes to allocate CPU time to when multiple processes are ready to run. It aims to maximize CPU utilization, throughput, response time, and fairness."
        },
        {
          "question": "What is cache memory?",
          "answer": "Cache memory is a small, fast type of volatile computer memory that provides high-speed data access to a processor and stores frequently accessed data and instructions to reduce latency."
        },
        {
          "question": "What is fragmentation?",
          "answer": "Fragmentation refers to the inefficiencies that arise when storage space is not used optimally. It can occur in both disk and memory allocation. External fragmentation occurs when free memory or disk space is broken into small pieces, making it challenging to allocate large contiguous blocks. Internal fragmentation occurs when allocated space is slightly larger than required, resulting in wasted space."
        },
        {
          "question": "What is multitasking?",
          "answer": "Multitasking is the concurrent execution of multiple tasks (processes, programs, or threads) over a certain period. It allows multiple tasks to share common resources such as CPU cycles, memory, and storage, thereby maximizing overall system efficiency and responsiveness."
        },
        {
          "question": "What is a system kernel?",
          "answer": "A system kernel is the core component of an operating system that provides essential services for all other parts of the operating system and applications. It manages hardware resources, memory, and system calls, and facilitates communication between software and hardware components."
        },
        {
          "question": "What is a process table?",
          "answer": "A process table is a data structure used by the operating system to manage information about all running processes. It typically contains entries for each process, including process ID, state, priority, CPU usage, memory usage, and other relevant information."
        },
        {
          "question": "What is a system loader?",
          "answer": "A system loader is a program that loads an operating system (OS) or other system software into memory, allowing it to execute and manage hardware resources. It performs tasks such as loading the OS kernel, initializing system components, and starting the boot process."
        },
        {
          "question": "What is system integrity?",
          "answer": "System integrity refers to the ability of an operating system or software system to maintain its functionality, security, and reliability in the face of internal and external threats, errors, or failures. It involves ensuring that system components operate correctly and securely under all conditions."
        },
        {
          "question": "What is a system monitor?",
          "answer": "A system monitor is a software application or utility that provides real-time monitoring and analysis of system resources, performance metrics, and hardware components. It allows users to track CPU usage, memory usage, disk activity, network traffic, and other system parameters."
        },
        {
          "question": "What is system architecture?",
          "answer": "System architecture refers to the structure, design, and organization of computer systems, including hardware components, software components, networks, protocols, and interfaces. It defines how these elements interact to achieve specific functionalities and performance goals."
        },
        {
          "question": "What is a system registry?",
          "answer": "A system registry is a centralized database used by Windows operating systems to store configuration settings, options, and preferences for the operating system, hardware devices, applications, and user profiles. It allows for efficient management and retrieval of system information."
        },
        {
          "question": "What is system performance tuning?",
          "answer": "System performance tuning involves optimizing the performance and efficiency of computer systems, networks, and software applications. It includes adjusting system settings, resource allocation, and configuration parameters to achieve better throughput, response times, and overall usability."
        },
        {
          "question": "What is a system service?",
          "answer": "A system service is a background process or task provided by the operating system or system software to perform specific functions or provide essential services to applications, users, and other system components. Examples include file management, printing, networking, and security services."
        },
        {
          "question": "What is system reliability?",
          "answer": "System reliability refers to the ability of a computer system, software application, or network to consistently perform its intended functions without failures or errors over a specified period. It involves minimizing downtime, preventing data loss, and ensuring continuous operation under varying conditions."
        },
        {
          "question": "What is system security?",
          "answer": "System security refers to the measures and practices used to protect computer systems, networks, and data from unauthorized access, attacks, damage, or misuse. It includes implementing security policies, using encryption, authentication, and access controls, and regularly updating systems to defend against threats."
        },
        {
          "question": "What is system scalability?",
          "answer": "System scalability refers to the ability of a computer system, network, or software application to handle increasing workloads and growing demands without compromising performance, responsiveness, or reliability. It involves designing systems that can adapt and expand to support larger user bases, data volumes, or transaction rates."
        }
      ]
    },
    {
      "category": "Computer Networks",
      "description": "Computer networks are the backbone of modern communication, enabling data exchange and resource sharing between devices.",
      "questions": [
        {
          "question": "What is a computer network?",
          "answer": "A computer network is a set of interconnected computers that communicate with each other and share resources, such as files, printers, and internet connections."
        },
        {
          "question": "What are the types of computer networks?",
          "answer": "The main types of computer networks include: LAN (Local Area Network), WAN (Wide Area Network), MAN (Metropolitan Area Network), PAN (Personal Area Network), and CAN (Campus Area Network)."
        },
        {
          "question": "What is the OSI model?",
          "answer": "The OSI model (Open Systems Interconnection model) is a conceptual framework used to understand and implement network protocols in seven layers: Physical, Data Link, Network, Transport, Session, Presentation, and Application."
        },
        {
          "question": "What is a protocol?",
          "answer": "A protocol is a set of rules and conventions that govern the communication between devices on a network. Examples include HTTP, TCP/IP, and FTP."
        },
        {
          "question": "What is an IP address?",
          "answer": "An IP address is a unique identifier assigned to each device connected to a network that uses the Internet Protocol for communication. It can be either IPv4 or IPv6."
        },
        {
          "question": "What is a MAC address?",
          "answer": "A MAC address (Media Access Control address) is a unique identifier assigned to a network interface card (NIC) for communication on the physical network segment."
        },
        {
          "question": "What is subnetting?",
          "answer": "Subnetting is the process of dividing a larger IP network into smaller, more manageable subnetworks (subnets) to improve network performance and security."
        },
        {
          "question": "What is the difference between TCP and UDP?",
          "answer": "TCP (Transmission Control Protocol) is connection-oriented, ensuring reliable data transfer, while UDP (User Datagram Protocol) is connectionless, providing faster but less reliable communication."
        },
        {
          "question": "What is DNS?",
          "answer": "DNS (Domain Name System) is a hierarchical system that translates human-readable domain names (e.g., www.example.com) into IP addresses that computers use to identify each other on the network."
        },
        {
          "question": "What is DHCP?",
          "answer": "DHCP (Dynamic Host Configuration Protocol) is a network management protocol used to automatically assign IP addresses and other network configuration parameters to devices on a network."
        },
        {
          "question": "What is a router?",
          "answer": "A router is a network device that forwards data packets between computer networks, directing the data along the most efficient paths."
        },
        {
          "question": "What is a switch?",
          "answer": "A switch is a network device that connects devices within a local area network (LAN) and uses MAC addresses to forward data to the correct destination."
        },
        {
          "question": "What is a firewall?",
          "answer": "A firewall is a network security device or software that monitors and controls incoming and outgoing network traffic based on predetermined security rules."
        },
        {
          "question": "What is NAT?",
          "answer": "NAT (Network Address Translation) is a method used by routers to translate private (local) IP addresses into a public IP address for communication over the internet."
        },
        {
          "question": "What is a VPN?",
          "answer": "A VPN (Virtual Private Network) is a secure connection method used to protect data transmitted over public networks by creating an encrypted tunnel between the user's device and the VPN server."
        },
        {
          "question": "What is a proxy server?",
          "answer": "A proxy server acts as an intermediary between a user's device and the internet, handling requests and forwarding them to the appropriate servers while masking the user's IP address."
        },
        {
          "question": "What is bandwidth?",
          "answer": "Bandwidth refers to the maximum rate at which data can be transferred over a network connection, typically measured in bits per second (bps)."
        },
        {
          "question": "What is latency?",
          "answer": "Latency is the time it takes for data to travel from the source to the destination, often measured in milliseconds (ms). Lower latency means faster communication."
        },
        {
          "question": "What is packet switching?",
          "answer": "Packet switching is a method of data transmission where data is broken into small packets, each of which is sent independently over the network and reassembled at the destination."
        },
        {
          "question": "What is circuit switching?",
          "answer": "Circuit switching is a method of data transmission where a dedicated communication path is established between two endpoints for the duration of the connection, commonly used in traditional telephone networks."
        },
        {
          "question": "What is a VLAN?",
          "answer": "A VLAN (Virtual Local Area Network) is a logical grouping of devices on a network that allows them to communicate as if they were on the same physical LAN, even if they are not."
        },
        {
          "question": "What is a WAN?",
          "answer": "A WAN (Wide Area Network) is a network that spans a large geographic area, connecting multiple smaller networks, such as LANs, to enable communication over long distances."
        },
        {
          "question": "What is a LAN?",
          "answer": "A LAN (Local Area Network) is a network that connects devices within a limited geographic area, such as a home, office, or campus, allowing them to share resources and communicate."
        },
        {
          "question": "What is the difference between a hub and a switch?",
          "answer": "A hub broadcasts data to all devices on a network, while a switch forwards data only to the device for which it is intended, using MAC addresses to make forwarding decisions."
        },
        {
          "question": "What is a collision domain?",
          "answer": "A collision domain is a network segment where data packets can collide with each other when being sent over a shared medium, common in early Ethernet networks using hubs."
        },
        {
          "question": "What is a broadcast domain?",
          "answer": "A broadcast domain is a network segment where a broadcast sent from any device is received by all other devices within the same segment, typically limited by routers."
        },
        {
          "question": "What is QoS?",
          "answer": "QoS (Quality of Service) is a set of techniques used to manage network traffic and ensure the performance of critical applications by prioritizing certain types of data."
        },
        {
          "question": "What is a socket?",
          "answer": "A socket is an endpoint for communication between two devices on a network, defined by an IP address and a port number, used for sending and receiving data."
        },
        {
          "question": "What is a port number?",
          "answer": "A port number is a numerical identifier used to distinguish different services and applications on a networked device, allowing multiple connections to be managed simultaneously."
        },
        {
          "question": "What is SSL/TLS?",
          "answer": "SSL (Secure Sockets Layer) and TLS (Transport Layer Security) are cryptographic protocols designed to provide secure communication over a network by encrypting data and ensuring its integrity and authenticity."
        },
        {
          "question": "What is HTTP/HTTPS?",
          "answer": "HTTP (Hypertext Transfer Protocol) is the protocol used for transmitting web pages over the internet. HTTPS (HTTP Secure) is an extension of HTTP that uses SSL/TLS to provide secure communication."
        },
        {
          "question": "What is FTP?",
          "answer": "FTP (File Transfer Protocol) is a standard network protocol used for transferring files between a client and a server on a computer network."
        },
        {
          "question": "What is a load balancer?",
          "answer": "A load balancer is a device or software that distributes incoming network traffic across multiple servers to ensure no single server becomes overwhelmed, improving performance and reliability."
        },
        {
          "question": "What is a multicast?",
          "answer": "Multicast is a communication method where data is transmitted from one sender to multiple receivers on a network simultaneously, using a special group address."
        },
        {
          "question": "What is unicast?",
          "answer": "Unicast is a communication method where data is sent from one sender to one receiver on a network, using the receiver's unique IP address."
        },
        {
          "question": "What is broadcast?",
          "answer": "Broadcast is a communication method where data is sent from one sender to all devices on a network segment, using a special broadcast address."
        },
        {
          "question": "What is an access point?",
          "answer": "An access point is a device that allows wireless devices to connect to a wired network using Wi-Fi, providing network access within a specific area."
        },
        {
          "question": "What is a SSID?",
          "answer": "SSID (Service Set Identifier) is the name assigned to a Wi-Fi network, allowing users to identify and connect to the correct wireless network."
        },
        {
          "question": "What is network topology?",
          "answer": "Network topology refers to the arrangement of elements (links, nodes, etc.) in a computer network. Common topologies include star, bus, ring, mesh, and hybrid."
        },
        {
          "question": "What is a star topology?",
          "answer": "In a star topology, all network devices are connected to a central hub or switch, with each device having a dedicated connection to the central point."
        },
        {
          "question": "What is a mesh topology?",
          "answer": "In a mesh topology, devices are interconnected, with each device connected to multiple other devices, providing high redundancy and reliability."
        },
        {
          "question": "What is a bus topology?",
          "answer": "In a bus topology, all devices share a common communication line or bus, with data transmitted in both directions along the bus."
        },
        {
          "question": "What is a ring topology?",
          "answer": "In a ring topology, devices are connected in a circular fashion, with each device having exactly two neighbors for communication purposes."
        },
        {
          "question": "What is an IPsec?",
          "answer": "IPsec (Internet Protocol Security) is a suite of protocols used to secure Internet Protocol (IP) communications by authenticating and encrypting each IP packet in a communication session."
        },
        {
          "question": "What is MPLS?",
          "answer": "MPLS (Multiprotocol Label Switching) is a data-carrying technique for high-performance telecommunications networks that directs data from one node to the next based on short path labels rather than long network addresses."
        },
        {
          "question": "What is a BGP?",
          "answer": "BGP (Border Gateway Protocol) is a standardized exterior gateway protocol used to exchange routing information between different networks on the internet."
        },
        {
          "question": "What is OSPF?",
          "answer": "OSPF (Open Shortest Path First) is an interior gateway protocol used for routing IP packets within a single routing domain, using a link-state routing algorithm."
        },
        {
          "question": "What is an ARP?",
          "answer": "ARP (Address Resolution Protocol) is a protocol used to map an IP address to a MAC address, enabling communication on a local network."
        },
        {
          "question": "What is RARP?",
          "answer": "RARP (Reverse Address Resolution Protocol) is a protocol used by a device to request its IP address from a network server when it only has its MAC address."
        },
        {
          "question": "What is ICMP?",
          "answer": "ICMP (Internet Control Message Protocol) is a protocol used for network diagnostics and error reporting, often used by tools like ping and traceroute."
        },
        {
          "question": "What is a CSU/DSU?",
          "answer": "A CSU/DSU (Channel Service Unit/Data Service Unit) is a device used to connect a digital data line to a router or other network device, converting signals for transmission over the network."
        },
        {
          "question": "What is the three-way handshake?",
          "answer": "The three-way handshake is a process used in TCP/IP networks to establish a connection between a client and a server. It involves three steps: SYN, SYN-ACK, and ACK."
        },
        {
          "question": "What is a ping?",
          "answer": "Ping is a network utility used to test the reachability of a host on an IP network and measure the round-trip time for messages sent from the originating host to a destination computer."
        },
        {
          "question": "What is traceroute?",
          "answer": "Traceroute is a network diagnostic tool used to track the path packets take from one IP address to another, displaying each hop along the way."
        },
        {
          "question": "What is an intrusion detection system (IDS)?",
          "answer": "An IDS (Intrusion Detection System) is a device or software application that monitors network traffic for suspicious activity and potential threats, alerting administrators to possible security breaches."
        },
        {
          "question": "What is an intrusion prevention system (IPS)?",
          "answer": "An IPS (Intrusion Prevention System) is a network security device that monitors network traffic for malicious activities and takes preventive actions, such as blocking traffic, to protect the network."
        },
        {
          "question": "What is a honeypot?",
          "answer": "A honeypot is a security mechanism set up to detect, deflect, or study attempts at unauthorized access to information systems, by creating a decoy system that appears legitimate."
        },
        {
          "question": "What is BYOD?",
          "answer": "BYOD (Bring Your Own Device) is a policy that allows employees to use their personal devices, such as smartphones and laptops, for work purposes, accessing the company's network and data."
        },
        {
          "question": "What is cloud computing?",
          "answer": "Cloud computing is the delivery of computing services, including storage, processing, and networking, over the internet (the cloud), allowing users to access and use resources on demand."
        },
        {
          "question": "What is SDN?",
          "answer": "SDN (Software-Defined Networking) is an approach to network management that enables dynamic, programmatically efficient network configuration to improve network performance and monitoring."
        },
        {
          "question": "What is CDN?",
          "answer": "A CDN (Content Delivery Network) is a distributed network of servers that delivers web content and services to users based on their geographic location, improving load times and reliability."
        },
        {
          "question": "What is load balancing?",
          "answer": "Load balancing is the process of distributing network traffic across multiple servers to ensure no single server is overwhelmed, improving application performance and reliability."
        },
        {
          "question": "What is network latency?",
          "answer": "Network latency is the time it takes for a data packet to travel from the source to the destination, often measured in milliseconds (ms). Lower latency means faster communication."
        },
        {
          "question": "What is a network administrator?",
          "answer": "A network administrator is responsible for maintaining computer networks, ensuring they run efficiently and securely, and troubleshooting any issues that arise."
        },
        {
          "question": "What is network redundancy?",
          "answer": "Network redundancy is the inclusion of extra or duplicate network devices, paths, or connections to ensure network availability and reliability in case of failure."
        }
      ]
    },
    {
      "category": "Angular",
      "description": "AngularJS is a JavaScript-based open-source front-end web framework mainly maintained by Google for developing single-page applications.",
      "questions": [
        {
          "question": "What is Angular?",
          "answer": "Angular is a platform and framework for building client-side applications using HTML, CSS, and JavaScript/TypeScript."
        },
        {
          "question": "What are the key features of Angular?",
          "answer": "Key features include two-way data binding, dependency injection, modular architecture, templates, directives, components, services, and the Angular CLI."
        },
        {
          "question": "What is a component in Angular?",
          "answer": "A component is a building block of an Angular application. It controls a patch of the screen called a view and consists of a TypeScript class, an HTML template, and a CSS stylesheet."
        },
        {
          "question": "What is a module in Angular?",
          "answer": "A module is a container for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities. It uses NgModules to group together related code."
        },
        {
          "question": "What is the Angular CLI?",
          "answer": "The Angular CLI is a command-line interface tool that helps to initialize, develop, scaffold, and maintain Angular applications."
        },
        {
          "question": "What is TypeScript?",
          "answer": "TypeScript is a superset of JavaScript that adds static typing and other features to the language. Angular applications are typically written in TypeScript."
        },
        {
          "question": "What is a directive in Angular?",
          "answer": "A directive is a class in Angular that can modify the structure of the DOM or change the appearance or behavior of a DOM element."

        },
        {
          "question": "What is data binding in Angular?",
          "answer": "Data binding is a mechanism to coordinate parts of a template with parts of a component. It keeps the model and view in sync."
        },
        {
          "question": "What is two-way data binding?",
          "answer": "Two-way data binding allows for automatic synchronization of data between the model and the view. When the model changes, the view updates, and vice versa."
        },
        {
          "question": "What is dependency injection in Angular?",
          "answer": "Dependency injection is a design pattern used to implement IoC (Inversion of Control). It allows a class to receive dependencies from external sources rather than creating them itself.",
          "code":"@NgModule({providers: [MyService]});"
        },
        {
          "question": "What are Angular templates?",
          "answer": "Templates in Angular are HTML files that define the view of the component. They use Angular's template syntax to bind data to the DOM."
        },
        {
          "question": "What is a service in Angular?",
          "answer": "A service is a class that handles the business logic of the application. It can be used to share data, manage data operations, and encapsulate logic that can be reused across multiple components."
        },
        {
          "question": "What is the purpose of NgModule in Angular?",
          "answer": "NgModule is a decorator that marks a class as an Angular module and provides metadata to configure the module. It helps in organizing an application into cohesive blocks of functionality.",
          "code":"@NgModule({declarations: [MyComponent], imports: [CommonModule], exports: [MyComponent]})"
        },
        {
          "question": "What is the purpose of the @Component decorator in Angular?",
          "answer": "The @Component decorator is used to mark a class as an Angular component and provides metadata that determines how the component should be processed, instantiated, and used at runtime."
        },
        {
          "question": "What is a router in Angular?",
          "answer": "The router is a service in Angular that enables navigation from one view to another as users perform application tasks. It interprets the browser URL as an instruction to change the view."
        },
        {
          "question": "What is interpolation in Angular?",
          "answer": "Interpolation is a way to bind a component property to the view using double curly braces ({{ }}). It allows you to display dynamic content in the template.",
          "code":"<h1>{{ title }}</h1>"
        },
        {
          "question": "What is property binding in Angular?",
          "answer": "Property binding is a one-way data binding technique where data flows from the component to the view. It is used to bind the value of a component property to an element property in the DOM.",
          "code":"<img [src]='imageUrl'>"
        },
        {
          "question": "What is event binding in Angular?",
          "answer": "Event binding is a one-way data binding technique where an event from the view is sent to the component class. It is used to listen for and respond to user actions in the view."
        },
        {
          "question": "What is the difference between property binding and interpolation?",
          "answer": "Property binding is used to bind the value of a property to an element property, while interpolation is used to bind the value of a property to the content of an element."
        },
        {
          "question": "What are pipes in Angular?",
          "answer": "Pipes are a way to transform data in Angular templates. They take in data as input and transform it to a desired output format using a pipe symbol (|)."
        },
        {
          "question": "How do you create a custom pipe in Angular?",
          "answer": "To create a custom pipe, you use the @Pipe decorator and implement the PipeTransform interface, defining the transform method to specify the transformation logic."
        },
        {
          "question": "What is a lifecycle hook in Angular?",
          "answer": "Lifecycle hooks are methods that Angular calls at different stages of a component's lifecycle, such as when it is created, initialized, or destroyed. Examples include ngOnInit, ngOnChanges, and ngOnDestroy."
        },
        {
          "question": "What is the purpose of the ngOnInit lifecycle hook?",
          "answer": "The ngOnInit lifecycle hook is called once, after the first ngOnChanges. It is a good place to put initialization logic for the component.",
          "code":"ngOnInit() { this.getData(); }"
        },
        {
          "question": "What is a form in Angular?",
          "answer": "A form in Angular is a mechanism for capturing user input. Angular provides two ways to handle forms: template-driven forms and reactive forms."
        },
        {
          "question": "What is the difference between template-driven forms and reactive forms?",
          "answer": "Template-driven forms rely on directives in the template to define the form, while reactive forms are more explicit and created programmatically in the component class using form control objects."
        },
        {
          "question": "What is the purpose of the @Injectable decorator in Angular?",
          "answer": "The @Injectable decorator is used to mark a class as a service that can be injected into other components or services. It provides metadata for Angular's dependency injection system.",
          "code":"@Injectable({providedIn: 'root'})"
        },
        {
          "question": "What is RxJS in Angular?",
          "answer": "RxJS (Reactive Extensions for JavaScript) is a library for reactive programming using observables. Angular uses RxJS to handle asynchronous operations and event-based programs."
        },
        {
          "question": "What is an observable in Angular?",
          "answer": "An observable is a stream of data that can be observed over time. It can emit multiple values over time and allows you to handle asynchronous data flows."
        },
        {
          "question": "What is an Angular service?",
          "answer": "An Angular service is a class that encapsulates reusable logic that can be shared across components. Services are typically used for data access, business logic, or state management."
        },
        {
          "question": "How do you handle HTTP requests in Angular?",
          "answer": "HTTP requests in Angular are handled using the HttpClient service, which is part of the HttpClientModule. It provides methods to perform HTTP requests and handle responses."
        },
        {
          "question": "What is lazy loading in Angular?",
          "answer": "Lazy loading is a technique that loads only the necessary modules when they are required, improving the initial load time of the application.",
          "code":"const routes: Routes = [{ path: 'admin', loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule) }];"
        },
        {
          "question": "What are Angular Guards?",
          "answer": "Angular Guards are interfaces that can be implemented to control navigation to and from components. Examples include CanActivate, CanDeactivate, Resolve, and CanLoad.",
          "code":"canActivate: [AuthGuard]"
        },
        {
          "question": "What is the difference between CanActivate and CanDeactivate guards?",
          "answer": "CanActivate guards are used to control whether a route can be activated, while CanDeactivate guards are used to control whether a user can leave a route.",
          "code":"canActivate: [AuthGuard], canDeactivate: [CanDeactivateGuard]"
        },
        {
          "question": "What is a resolver in Angular?",
          "answer": "A resolver is a class that implements the Resolve interface. It is used to pre-fetch data before navigating to a route."
        },
        {
          "question": "How do you use the Angular CLI to generate a new component?",
          "answer": "You can use the Angular CLI command `ng generate component component-name` or `ng g c component-name` to generate a new component."
        },
        {
          "question": "What is Angular Universal?",
          "answer": "Angular Universal is a technology that allows Angular applications to be server-side rendered (SSR), improving performance and SEO."
        },
        {
          "question": "How do you implement server-side rendering (SSR) in Angular?",
          "answer": "Server-side rendering in Angular can be implemented using Angular Universal, which involves setting up a Node.js server to render the application on the server side."
        },
        {
          "question": "What is the purpose of the HttpInterceptor in Angular?",
          "answer": "The HttpInterceptor is used to intercept and manipulate HTTP requests and responses in an Angular application. It can be used for logging, adding headers, or handling errors."
        },
        {
          "question": "How do you handle errors globally in an Angular application?",
          "answer": "Errors can be handled globally in an Angular application by creating a global error handler service that implements the ErrorHandler interface.",
          "code":"@Injectable() export class GlobalErrorHandler implements ErrorHandler { handleError(error: any) { console.error('An error occurred:', error); } }"
        },
        {
          "question": "What are Angular animations and how do you create them?",
          "answer": "Angular animations are a way to animate the properties of HTML elements. They can be created using the Angular animations module, which provides functions like trigger, state, style, animate, and transition."
        },
        {
          "question": "What is the difference between @Input and @Output in Angular?",
          "answer": "@Input is used to pass data from a parent component to a child component, while @Output is used to emit events from a child component to a parent component."
        },
        {
          "question": "How do you use Angular Forms with FormBuilder?",
          "answer": "FormBuilder is a service in Angular that helps to create reactive forms more easily by providing methods to group controls, set default values, and apply validators."
        },
        {
          "question": "What is the purpose of the async pipe in Angular?",
          "answer": "The async pipe subscribes to an Observable or Promise and returns the latest value it has emitted. It also handles unsubscribing automatically to prevent memory leaks.",
          "code":"<div>{{ data$ | async }}</div>"
        },
        {
          "question": "What is Angular Material and how do you use it?",
          "answer": "Angular Material is a UI component library for Angular applications. It provides reusable, well-designed UI components that follow the Material Design guidelines."
        },
        {
          "question": "What are Angular directives and how do you create a custom directive?",
          "answer": "Angular directives are classes that add behavior to elements in your Angular applications. Custom directives can be created using the @Directive decorator.",
          "code":"@Directive({ selector: '[appHighlight]' })"
        },
        {
          "question": "How do you use the ContentChild and ViewChild decorators in Angular?",
          "answer": "ContentChild is used to access a child component, directive, or DOM element in a component's content, while ViewChild is used to access a child component, directive, or DOM element in the component's view."
        },
        {
          "question": "What is the purpose of the Renderer2 service in Angular?",
          "answer": "Renderer2 is a service in Angular that allows you to manipulate DOM elements in a way that is compatible with Angular's rendering engine and is safe for server-side rendering."
        },
        {
          "question": "How do you perform state management in Angular?",
          "answer": "State management in Angular can be performed using libraries like NgRx, which provides a Redux-like state management pattern, or using Angular's built-in services and observables."
        },
        {
          "question": "What is the purpose of the Angular CLI schematics?",
          "answer": "Angular CLI schematics are used to automate tasks such as code generation, project setup, and code modification, helping to maintain consistency and efficiency."
        },
        {
          "question": "What is AOT compilation in Angular?",
          "answer": "AOT (Ahead-of-Time) compilation is a process where Angular compiles your application and libraries at build time, resulting in faster rendering and smaller application size."
        },
        {
          "question": "What is the purpose of the Angular service worker?",
          "answer": "The Angular service worker is used to make Angular applications work offline by caching resources and handling network requests."
        },
        {
          "question": "How do you implement internationalization (i18n) in Angular?",
          "answer": "Internationalization in Angular can be implemented using Angular's i18n tools, which include extracting translation files, using translation tags in templates, and building the application with different locales."
        },
        {
          "question": "What is the difference between structural and attribute directives in Angular?",
          "answer": "Structural directives change the structure of the DOM (e.g., ngIf, ngFor), while attribute directives change the appearance or behavior of an existing DOM element (e.g., ngClass, ngStyle).",
          "code":"<div *ngIf='condition'>...</div>"
        },
        {
          "question": "How do you use the Angular Router to pass data between routes?",
          "answer": "Data can be passed between routes in Angular using route parameters, query parameters, or the state object in the navigation extras."
        },
        {
          "question": "What is a singleton service in Angular?",
          "answer": "A singleton service in Angular is a service that is provided at the root level and instantiated only once, shared across the entire application."
        },
        {
          "question": "How do you create reusable components in Angular?",
          "answer": "Reusable components in Angular can be created by designing them to be modular, using @Input and @Output for data binding, and encapsulating logic within the component."
        },
        {
          "question": "What are Angular modules and why are they important?",
          "answer": "Angular modules (NgModules) are containers for a cohesive block of code dedicated to an application domain, a workflow, or a set of capabilities. They help in organizing and managing dependencies."
        },
        {
          "question": "What is the purpose of the Angular ChangeDetectionStrategy?",
          "answer": "ChangeDetectionStrategy is used to control how change detection is performed in Angular. It can be set to Default or OnPush to optimize performance."
        },
        {
          "question": "How do you optimize an Angular application for production?",
          "answer": "Optimizing an Angular application for production involves enabling AOT compilation, using Angular CLI's build optimization options, lazy loading modules, minimizing change detection cycles, and tree-shaking unused code."
        },
        {
          "question": "What is the purpose of the Angular Ivy renderer?",
          "answer": "Ivy is the new rendering engine for Angular, designed to improve compilation and rendering performance, reduce bundle sizes, and enable new features like dynamic components."
        },
        {
          "question": "What is Angular's Ivy rendering engine?",
          "answer": "Ivy is Angular's next-generation rendering engine that improves build times, reduces bundle sizes, and introduces new features like dynamic component loading and better debugging."
        },
        {
          "question": "How do you implement state management in Angular using NgRx?",
          "answer": "State management with NgRx involves using actions to dispatch changes, reducers to handle state transitions, selectors to read state, and effects to handle side effects like HTTP requests."
        },
        {
          "question": "What are Angular Schematics and how are they used?",
          "answer": "Angular Schematics are templates for code transformations that help automate tasks like project setup, code generation, and refactoring. They are used via the Angular CLI."
        },
        {
          "question": "What is the role of the Angular Compiler (ngc)?",
          "answer": "The Angular Compiler (ngc) is a TypeScript compiler wrapper that processes Angular decorators and templates to produce optimized JavaScript code."
        },
        {
          "question": "How do you create a custom Angular CLI command?",
          "answer": "Custom Angular CLI commands can be created using Angular Schematics by defining new schematics or modifying existing ones in the angular.json file."
        },
        {
          "question": "What is tree shaking and how does it benefit Angular applications?",
          "answer": "Tree shaking is a process that removes unused code during the build process. It helps reduce the final bundle size, making Angular applications load faster."
        },
        {
          "question": "What is the difference between ViewEncapsulation.None, ViewEncapsulation.Emulated, and ViewEncapsulation.ShadowDom in Angular?",
          "answer": "ViewEncapsulation.None applies styles globally, ViewEncapsulation.Emulated uses scoped styles by adding unique attributes, and ViewEncapsulation.ShadowDom uses native Shadow DOM for true encapsulation."
        },
        {
          "question": "How do you implement custom validators in Angular reactive forms?",
          "answer": "Custom validators are implemented by creating a function that returns an object with validation errors or null if the control is valid. This function is then added to the form control's validators."
        },
        {
          "question": "What is the Angular CDK and how is it used?",
          "answer": "The Angular CDK (Component Dev Kit) provides a set of behavior primitives for building UI components. It includes utilities for accessibility, layout, overlay, and more."
        },
        {
          "question": "How do you perform advanced routing configurations in Angular?",
          "answer": "Advanced routing configurations include using lazy loading, route guards, resolvers, nested routes, and route reuse strategies to optimize navigation and improve user experience."
        },
        {
          "question": "What is Angular's renderer architecture and how does it affect performance?",
          "answer": "Angular's renderer architecture abstracts the DOM manipulation, allowing for rendering optimizations and platform independence. It affects performance by minimizing direct DOM access and leveraging efficient updates."
        },
        {
          "question": "How do you create dynamic components in Angular?",
          "answer": "Dynamic components are created using the ComponentFactoryResolver and ViewContainerRef to dynamically load and insert component instances at runtime."
        },
        {
          "question": "What is the role of Angular zones (Zone.js)?",
          "answer": "Angular zones (Zone.js) provide a mechanism for detecting asynchronous operations and triggering change detection automatically, simplifying the synchronization between the application state and the view."
        },
        {
          "question": "How do you handle memory leaks in Angular applications?",
          "answer": "Memory leaks can be handled by unsubscribing from observables, detaching event listeners, avoiding excessive use of global variables, and using Angular's OnDestroy lifecycle hook to clean up resources."
        },
        {
          "question": "What is differential loading in Angular?",
          "answer": "Differential loading is a technique where Angular generates two bundles: one for modern browsers with ES2015+ and another for legacy browsers with ES5, improving load times and performance."
        },
        {
          "question": "How do you optimize Angular applications for SEO?",
          "answer": "SEO optimization includes using Angular Universal for server-side rendering, implementing meta tags and structured data, creating descriptive URLs, and ensuring fast load times and mobile-friendly design."
        },
        {
          "question": "What is the purpose of Angular's ngZone service?",
          "answer": "The ngZone service helps manage the scope of asynchronous operations and triggers change detection automatically when these operations complete, ensuring the UI is updated correctly.",
          "code":"constructor(private ngZone: NgZone) { this.ngZone.run(() => { /* code here */ }); }"
        },
        {
          "question": "How do you configure and use Angular's Web Workers?",
          "answer": "Web Workers in Angular can be configured using the Angular CLI with the --web-worker flag, enabling background processing for computationally intensive tasks without blocking the main thread."
        },
        {
          "question": "How do you use Angular's renderer2 service for custom rendering?",
          "answer": "Renderer2 provides an abstraction for DOM manipulation, allowing for safe and efficient updates to the DOM. It can be used to create, update, and remove elements dynamically.",
          "code":"constructor(private renderer: Renderer2, private el: ElementRef) { this.renderer.setStyle(this.el.nativeElement, 'color', 'red'); }"
        },
        {
          "question": "What are Angular structural directives and how do you create a custom one?",
          "answer": "Structural directives alter the structure of the DOM. Custom structural directives are created using the @Directive decorator and implementing logic to manipulate the view using the ViewContainerRef and TemplateRef."
        },
        {
          "question": "How do you handle nested reactive forms in Angular?",
          "answer": "Nested reactive forms are handled by creating form groups and form arrays within the main form group, allowing for complex form structures with nested data and validations."
        },
        {
          "question": "What is the purpose of Angular's content projection?",
          "answer": "Content projection allows you to insert dynamic content into a component's template, enabling the creation of reusable and configurable components. It is achieved using <ng-content> tags.",
          "code":"<app-card><h1>Title</h1><p>Content</p></app-card>"
        },
        {
          "question": "How do you implement progressive web app (PWA) features in Angular?",
          "answer": "PWA features in Angular are implemented using the Angular Service Worker, which provides capabilities like offline caching, background sync, and push notifications, enhancing the app's performance and user experience."
        },
        {
          "question": "What is Angular's change detection strategy and how do you optimize it?",
          "answer": "Angular's change detection strategy determines how the framework checks for changes in the component tree. Optimizations include using OnPush strategy, immutable data structures, and minimizing bindings."
        },
        {
          "question": "How do you create and use Angular libraries?",
          "answer": "Angular libraries are created using the Angular CLI with the `ng generate library` command. They allow you to package and share reusable code across multiple Angular projects."
        },
        {
          "question": "What are the benefits and drawbacks of using OnPush change detection strategy?",
          "answer": "OnPush change detection strategy improves performance by only checking components when input properties change or events occur. Drawbacks include needing to manage state immutability and ensuring proper change propagation."
        },
        {
          "question": "How do you implement advanced form validation in Angular?",
          "answer": "Advanced form validation includes creating custom validators, using asynchronous validators, dynamically adding/removing validators, and using validation messages to provide feedback to the user."
        },
        {
          "question": "What is the purpose of Angular's ViewContainerRef and how is it used?",
          "answer": "ViewContainerRef represents a container where one or more views can be attached. It is used to dynamically create, insert, and remove views in a template.",
          "code":"constructor(private viewContainerRef: ViewContainerRef) { const componentFactory = this.componentFactoryResolver.resolveComponentFactory(MyComponent); const componentRef = this.viewContainerRef.createComponent(componentFactory); }"
        },
        {
          "question": "How do you handle large datasets in Angular applications?",
          "answer": "Handling large datasets involves using virtual scrolling, pagination, efficient data fetching strategies (like infinite scrolling), and leveraging Angular's ChangeDetectionStrategy.OnPush to optimize performance."
        },
        {
          "question": "What are the differences between Angular's Renderer2 and direct DOM manipulation?",
          "answer": "Renderer2 provides an abstraction for DOM manipulation that works across different platforms and environments, ensuring security and compatibility, while direct DOM manipulation can lead to potential security risks and compatibility issues."
        }
      ]
    }
   
   
  ]